<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MiniInputPro</name>
    </assembly>
    <members>
        <member name="T:MiniTools.UI.Input.MtBeepCmd">
            <summary>
            (Pro) Beeps the computer.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputCmd">
            <summary>
            (Pro) Base class for all input commands.
            An input command is an input event that can be sent to a window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.ArgumentRequiresDelimeters(System.String,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets whether the specified argument requires its delimeters.
            </summary>
            <param name="arg">Any text.  OK if null or blank.</param>
            <param name="textType">Type of text in the argument.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.Execute">
            <summary>
            Executes the specified command in the active window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.Execute(MiniTools.UI.Input.MtMacro)">
            <summary>
            Executes the specified command in the active window.
            </summary>
            <param name="macro">Macro executing this command. Enables checking for cancel. OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.ExecuteDerived(MiniTools.UI.Input.MtMacro)">
            <summary>
            Override to provide execution capabilities.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.Parse(MiniTools.UI.Input.MtMacroToken)">
            <summary>
            Returns the command represented by the specified macro token,
            or null if the token does not represent this type of command.
            </summary>
            <param name="macroToken">Macro command text parsed into its component pieces.  Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.ParseModifiers(MiniTools.UI.Input.MtMacroToken)">
            <summary>
            Parses the parsed command and returns any key modifiers
            expressed in the prefixes.
            Will return Keys.None if no modifiers in the prefixes.
            </summary>
            <param name="macroToken">Command text parsed into its component parts.  Ignored if null.</param>
            <returns></returns>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.GetText(MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets the text for this input command.
            </summary>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.InsertCmdText(System.String,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified command text into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="cmdText">Text string to insert. Ignored if null or blank.</param>
            <param name="textBox">Textbox to insert the command text into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmd.InsertCmdText(System.String,System.Windows.Forms.TextBox,System.Int32,System.Int32)">
            <summary>
            Inserts the specified command text into the text box
            at the next appropriate insertion point and selects the specified text.
            </summary>
            <param name="cmdText">Text string to insert. Ignored if null or blank.</param>
            <param name="textBox">Textbox to insert the command text into. Ignored if null.</param>
            <param name="cmdSelectionStart">Index into 'cmdText' where the selection point should be. Ignored if less than zero.</param>
            <param name="cmdSelectionLength">Length of the textbox text to be selected. Ignored if zero or less.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputCmd.DataName">
            <summary>
            Gets the data name used to store this input command.
            THESE NAMES SHOULD NEVER CHANGE
            and hence can be used for long-term persistence.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputCmd.Type">
            <summary>
            Gets the type of this input command.
            This is a GUID so that you and other third parties can extend
            the Mini-Input macro language.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtBeepCmd.#ctor">
            <summary>
            Constructs a command that will beep the computer 
            while executing input commands.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtBeepCmd.#ctor(System.Int32)">
            <summary>
            Constructs a command that will beep the computer
            while executing input commands.
            </summary>
            <param name="beepType">Beep type to use: 
            Default = 1, Asterisk = 2, CriticalStop = 3, Exclamation = 4, Question = 5</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtBeepCmd.InsertCmd(System.Int32,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified beep command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="beepType">Beep type to use: 
            Default = 1, Asterisk = 2, CriticalStop = 3, Exclamation = 4, Question = 5</param>
            <param name="textBox">Textbox to insert the beep command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtBeepCmd.GetText(System.Int32,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified beep command.
            </summary>
            <param name="beepType">Beep type to use: 
            Default = 1, Asterisk = 2, CriticalStop = 3, Exclamation = 4, Question = 5</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtBeepCmd.Beep">
            <summary>
            Gets or sets the beep type to sound:
            Default = 1, Asterisk = 2, CriticalStop = 3, Exclamation = 4, Question = 5.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtBeepCmd.TypeID">
            <summary>
            Gets the ID for all Beep commands.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtCommentCmd">
            <summary>
            (Pro) Adds a comment to a list of input commands.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtCommentCmd.#ctor">
            <summary>
            Constructs a comment.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtCommentCmd.#ctor(System.String)">
            <summary>
            Constructs a comment.
            </summary>
            <param name="commentText">Comment text.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtCommentCmd.InsertCmd(System.String,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified comment into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="commentText">Any text comment.</param>
            <param name="textBox">Textbox to insert the comment into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtCommentCmd.GetText(System.String,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets the text for the specified comment command.
            </summary>
            <param name="commentText">Comment text. Can be anything.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtCommentCmd.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputCmdColl">
            <summary>
            (Pro) Type-safe collection of input commands used in a macro.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.#ctor">
            <summary>
            Constructs an empty collection.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Add(MiniTools.UI.Input.MtInputCmd)">
            <summary>
            Adds the specified command to the end of this collection.
            </summary>
            <param name="cmd">Ignored if null</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.AddRange(MiniTools.UI.Input.MtInputCmd[])">
            <summary>
            Adds an array of commands to the end of this collection.
            </summary>
            <param name="cmds">Array of commands to add.  Ignored if null or empty.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Clear">
            <summary>
            Clears all commands in this collection.  
            OK to call if already empty.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Clone">
            <summary>
            Creates a shallow copy of this collection,
            returning a new collection that contains the same commands
            that are in this collection.
            Will always return a new collection, even if this collection is empty.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Contains(MiniTools.UI.Input.MtInputCmd)">
            <summary>
            Returns whether the specified command is in this collection.
            </summary>
            <param name="cmd">Command you are searching for.  OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.GetNullEnumerator">
            <summary>
            Gets an enumerator for a null collection.
            Will never return null.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.CopyTo(System.Array)">
            <summary>
            Copies this collection into the specified array.
            </summary>
            <param name="toArray">Array to copy to.  Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies this collection into the specified array,
            starting at the specified index in the target array.
            </summary>
            <param name="toArray">Array to copy to.  Cannot be null.</param>
            <param name="toIndex">Zero-based index into the target array in which copying begins.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of commands from this collection into the specified array,
            starting at the specified index in the target array.
            </summary>
            <param name="toArray">Array to copy to.  Cannot be null.</param>
            <param name="toIndex">Zero-based index into the target array in which copying begins.</param>
            <param name="fromIndex">Zero-based index in source array from which copying begins.</param>
            <param name="cmdCount">Number of commands to copy.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.GetTypesafeEnumerator">
            <summary>
            Returns an enumerator for this collection.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Used to satisfy interface.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Insert(MiniTools.UI.Input.MtInputCmd,System.Int32)">
            <summary>
            Inserts the specified command at the specified index in this collection.
            </summary>
            <param name="cmd">Ignored if null.</param>
            <param name="index">Index at which to insert the command.  
            Will be forced to zero if less than zero.  
            Will add to the end of this collection 
            if the index is past the end of the collection.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Insert(MiniTools.UI.Input.MtInputCmd[],System.Int32)">
            <summary>
            Inserts an array of commands to the end of this collection.
            </summary>
            <param name="cmds">Array of commands to add.  Ignored if null or empty.</param>
            <param name="index">Index at which to insert the command.  
            Will be forced to zero if less than zero.  
            Will add to the end of this collection 
            if the index is past the end of the collection.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.ReadyToAdd">
            <summary>
            Ensures this collection exists and is ready to be added to.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Remove(MiniTools.UI.Input.MtInputCmd)">
            <summary>
            Removes the specified command from this collection.
            </summary>
            <param name="cmd">Ignored if null</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.RemoveAt(System.Int32)">
            <summary>
            Removes the command at the specified index from this collection.
            </summary>
            <param name="index">Ignored if index is not valid.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified command from this collection.
            </summary>
            <param name="index">Index at which to remove the range of commands.  
            Ignored if less than zero or past the end of this collection.</param>
            <param name="cmdCount">Number of commands to remove.  OK if count is too large; all items to the end of the collection will be removed.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputCmdColl.Commands">
            <summary>
            Creates an array of all commands in this collection.
            May return null if there are no commands.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputCmdColl.Item(System.Int32)">
            <summary>
            Gets the command in this collection with the specified index.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputCmdColl.Count">
            <summary>
            Gets the number of commands in this collection.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputCmdColl.IsSynchronized">
            <summary>
            Gets whether access to this collection is synchronized (thread-safe).
            May return false if this collection has not been used yet.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputCmdColl.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access 
            to this collection across threads.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputCmdColl.Enumerator">
            <summary>
            Used to enumerate the commands in this collection.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Enumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            Type-safe wrapper around an enumerator for the internal collection
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next command in this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdColl.Enumerator.Reset">
            <summary>
            Sets the enumerator to position before the first command in this collection.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputCmdColl.Enumerator.CurrentCmd">
            <summary>
            Gets the current command in this collection.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputCmdMgr">
            <summary>
            Manages all input commands.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdMgr.GetCmd(System.Guid)">
            <summary>
            Gets the registered command of the specified type.
            May return null if no command of that type exists.
            </summary>
            <param name="cmdType">Unique ID for the type of command you seek.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdMgr.RegisterCommand(MiniTools.UI.Input.MtInputCmd)">
            <summary>
            Registers the specified type of command 
            to include it when parsing commands.
            </summary>
            <param name="command">Instance of the type of command you would like to parse.  Ignored if null or already added.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputCmdMgr.ParseToken(MiniTools.UI.Input.MtMacroToken)">
            <summary>
            Parses the macro token into an input command.
            Creates an MtUnknownCmd if the command could not be parsed.
            Returns null if 'macroToken' is null.
            </summary>
            <param name="macroToken">Command text parsed into its component parts. Ignored if null.</param>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyCmd">
            <summary>
            (Pro) Sends a key to a window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.#ctor">
            <summary>
            Constructs an empty key input command (Keys.None).
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.#ctor(System.Windows.Forms.Keys)">
            <summary>
            Constructs an input command with the specified key.
            </summary>
            <param name="k">Any key and its modifiers, if any.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.#ctor(System.Windows.Forms.Keys,MiniTools.UI.Input.MtKeyCmdTypes)">
            <summary>
            Constructs an input command with the specified key.
            </summary>
            <param name="k">Any key and its modifiers, if any.</param>
            <param name="cmdType">What type of key command this is.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.InsertCmd(System.Windows.Forms.Keys,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified key command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="k">Any key.</param>
            <param name="textBox">Textbox to insert the key command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.InsertCmd(System.Windows.Forms.Keys,System.Int32,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified key command into the text box the specified number of presses
            at the next appropriate insertion point.
            </summary>
            <param name="k">Any key.</param>
            <param name="numPresses">Number of presses in succession</param>
            <param name="textBox">Textbox to insert the key command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.InsertCmd(System.Windows.Forms.Keys,MiniTools.UI.Input.MtKeyCmdTypes,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified key command into the text box the specified number of presses
            at the next appropriate insertion point.
            </summary>
            <param name="k">Any key.</param>
            <param name="keyCmdType">Type of key command to send.</param>
            <param name="textBox">Textbox to insert the key command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.GetText(System.Windows.Forms.Keys,MiniTools.UI.Input.MtKeyCmdTypes,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified key command.
            </summary>
            <param name="k">Any key</param>
            <param name="keyCmdType">Type of key command.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.GetText(System.Windows.Forms.Keys,System.Int32,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified key command.
            </summary>
            <param name="k">Any key</param>
            <param name="numPresses">Number of presses in succession</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyCmd.GetText(System.Windows.Forms.Keys,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified key command.
            </summary>
            <param name="k">Any key</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyCmd.CommandType">
            <summary>
            Gets or sets the type of key command this is.
            By default, this is a key Press.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyCmd.Key">
            <summary>
            Gets or sets the key that should be sent to a window.
            Can be anything or null.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyCmd.Presses">
            <summary>
            Gets or sets the number of key presses to send in succession.
            Default is 1.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyCmdTypes">
            <summary>
            Different type of key commands.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyCmdTypes.Down">
            <summary>
            Key is pressed down.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyCmdTypes.Press">
            <summary>
            Key is pressed and released.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyCmdTypes.Up">
            <summary>
            Key is released.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyCmdTypes.Off">
            <summary>
            Key state is turned off, such as Caps Lock off.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyCmdTypes.On">
            <summary>
            Key state is turned on, such as Caps Lock on.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseCmd">
            <summary>
            (Pro) Sends mouse input to a window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.#ctor">
            <summary>
            Constructs a null mouse command.
            You need to set the properties, including Command.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.#ctor(System.Windows.Forms.MouseButtons)">
            <summary>
            Constructs a command representing a single mouse click.
            </summary>
            <param name="buttonClicked">Mouse button click that should be sent to a window.
            If more than one button is OR'd together, only one button will be clicked,
            the one with the lowest value in the MouseButtons enumeration.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.#ctor(System.Windows.Forms.MouseButtons,System.Int32)">
            <summary>
            Constructs a command representing a mouse click.
            </summary>
            <param name="buttonClicked">Mouse button click that should be sent to a window.
            If more than one button is OR'd together, only one button will be clicked,
            the one with the lowest value in the MouseButtons enumeration.</param>
            <param name="clickCount">Number of times to click the mouse in succession. Less than 1 will be set to 1.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Windows.Forms.Keys)">
            <summary>
            Constructs a command representing a mouse click.
            </summary>
            <param name="buttonClicked">Mouse button click that should be sent to a window.
            If more than one button is OR'd together, only one button will be clicked,
            the one with the lowest value in the MouseButtons enumeration.</param>
            <param name="clickCount">Number of times to click the mouse in succession. Less than 1 will be set to 1.</param>
            <param name="mods">Modifier keys pressed down while the mouse click occurred.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.#ctor(System.Windows.Forms.MouseButtons,System.Boolean,System.Windows.Forms.Keys)">
            <summary>
            Constructs a command representing a mouse button pressed down or released up.
            </summary>
            <param name="buttonClicked">Mouse button click that should be sent to a window.
            If more than one button is OR'd together, only one button will be clicked,
            the one with the lowest value in the MouseButtons enumeration.</param>
            <param name="down">True if clicked down; false if released up.</param>
            <param name="mods">Modifier keys pressed down while the mouse event occurred.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.#ctor(MiniTools.UI.Input.MtMouseCmdTypes,System.Int32,System.Int32)">
            <summary>
            Constructs a command representing a mouse move.
            </summary>
            <param name="moveCommand">Command that describes how to move the mouse.  Will be forced to MouseMoveWindow if one of the MouseMove commands is not specified.</param>
            <param name="toX">X (horizontal) value</param>
            <param name="toY">Y (vertical) value</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.#ctor(System.Boolean)">
            <summary>
            Constructs a command representing a mouse wheel scroll.
            </summary>
            <param name="up">Whether the mouse wheel was scrolled up (true) or down (false)</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructs a command representing a mouse wheel scroll.
            </summary>
            <param name="up">Whether the mouse wheel was scrolled up (true) or down (false)</param>
            <param name="clickCount">Number of mouse wheel clicks</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.InsertCmd(System.Windows.Forms.MouseButtons,System.Int32,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified mouse command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="button">Mouse button that was clicked.</param>
            <param name="clickCount">Number of times to click the mouse in succession. Less than 1 will be set to 1.</param>
            <param name="textBox">Textbox to insert the mouse command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.InsertCmd(MiniTools.UI.Input.MtMouseCmdTypes,System.Int32,System.Int32,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified mouse move command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="moveCommand">Command that describes how to move the mouse.  Will be forced to MouseMoveWindow if one of the MouseMove commands is not specified.</param>
            <param name="toX">X (horizontal) value</param>
            <param name="toY">Y (vertical) value</param>
            <param name="textBox">Textbox to insert the mouse command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.InsertWheelCmd(System.Boolean,System.Int32,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified mouse wheel command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="up">True if the wheel was moved up, false if moved down.</param>
            <param name="clickCount">Number of mouse wheel clicks.</param>
            <param name="textBox">Textbox to insert the mouse command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.GetText(System.Windows.Forms.MouseButtons,System.Int32,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified mouse click command.
            </summary>
            <param name="button">Any mouse button</param>
            <param name="clickCount">Number of times to click the mouse in succession. Less than 1 will be set to 1.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.GetText(MiniTools.UI.Input.MtMouseCmdTypes,System.Int32,System.Int32,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified mouse move command.
            </summary>
            <param name="moveCommand">Command that describes how to move the mouse.  Will be forced to MouseMoveWindow if one of the MouseMove commands is not specified.</param>
            <param name="toX">X (horizontal) value</param>
            <param name="toY">Y (vertical) value</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseCmd.GetText(System.Boolean,System.Int32,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified mouse wheel command.
            </summary>
            <param name="up">Whether the mouse wheel was scrolled up (true) or down (false)</param>
            <param name="clickCount">Number of mouse wheel clicks.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseCmd.MouseButton">
            <summary>
            Gets or sets the mouse button click that should be sent to a window.
            If more than one button is OR'd together, only one button will be clicked,
            (the button with the lowest value in the MouseButtons enumeration).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseCmd.Clicks">
            <summary>
            Gets or sets the number of mouse button or mouse wheel clicks.
            Anything less than 1 will be set to 1.  Default is 1.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseCmd.CommandType">
            <summary>
            Gets or sets the type of mouse command this is.
            By default, this is a mouse click.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseCmd.Modifiers">
            <summary>
            Gets or sets the modifier keys that are to be pressed down
            during this mouse event.  This only affects mouse clicks.
            OR together the modifier values, such as Keys.Alt | Keys.Shift.
            Will be Keys.None if no modifier keys were pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseCmd.WheelUp">
            <summary>
            Gets or sets whether the mouse wheel was moved up (true)
            or down (false).  Default is down.
            Ignored if this is not a mouse wheel command.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseCmd.X">
            <summary>
            Gets or sets the X (horizontal) value for mouse moves.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseCmd.Y">
            <summary>
            Gets or sets the Y (vertical) value for mouse moves.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseCmdTypes">
            <summary>
            Different type of key commands.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseCmdTypes.None">
            <summary>
            No mouse action is taken (null op).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseCmdTypes.Click">
            <summary>
            Mouse button is clicked down and released up.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseCmdTypes.Down">
            <summary>
            Mouse button is clicked down.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseCmdTypes.Up">
            <summary>
            Mouse button is released up.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseCmdTypes.MoveWindow">
            <summary>
            Move the mouse cursor to the specified position in the current window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseCmdTypes.MoveRelative">
            <summary>
            Move the mouse cursor relative to the current mouse cursor position.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseCmdTypes.MoveScreen">
            <summary>
            Move the mouse cursor to the specified screen position.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseCmdTypes.Wheel">
            <summary>
            Roll the mouse wheel
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtPauseCmd">
            <summary>
            (Pro) Adds a pause while executing input commands.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtPauseCmd.#ctor">
            <summary>
            Constructs a command that will pause while executing input commands.
            By default, this will pause for one half second.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtPauseCmd.#ctor(System.Int32)">
            <summary>
            Constructs a command that will pause for the specified amount of time
            while executing input commands.
            </summary>
            <param name="pause">Pause while executing input commands.
            This pause is in milliseconds, so 1000 = 1 second.  Less than 0 is forced to 0.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtPauseCmd.InsertCmd(System.Int32,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified pause command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="pause">Time pause in milliseconds.</param>
            <param name="textBox">Textbox to insert the pause command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtPauseCmd.GetText(System.Int32,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified pause command.
            </summary>
            <param name="pause">Pause in milliseconds</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtPauseCmd.PauseMS">
            <summary>
            Gets or sets the pause while executing input commands.
            This pause is in milliseconds, so 1000 = 1 second.
            Default is 500 (half second).  Less than zero will be forced to zero.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtRunCmd">
            <summary>
            (Pro) Runs the specified macro.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtRunCmd.#ctor">
            <summary>
            Constructs a blank run command that will do nothing until the Path
            is set.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtRunCmd.#ctor(System.String)">
            <summary>
            Constructs a command that will run the specified path.
            </summary>
            <param name="runPath">Path to run, including any optional arguments.  OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtRunCmd.InsertCmd(System.String,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified run command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="runPath">Path to run, including any optional arguments.  OK if null.</param>
            <param name="textBox">Textbox to insert the run command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtRunCmd.GetText(System.String,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified run command.
            </summary>
            <param name="runPath">Path to run, including any optional arguments.  OK if null.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtRunCmd.Path">
            <summary>
            Gets or sets the path (including optional arguments) to run.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtSoundCmd">
            <summary>
            (Pro) Plays the specified sound file.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtSoundCmd.#ctor">
            <summary>
            Constructs a blank sound command that will do nothing until the Path
            is set.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtSoundCmd.#ctor(System.String)">
            <summary>
            Constructs a command that will play the specified sound file.
            </summary>
            <param name="soundPath">Full path of the sound file to play.  OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSoundCmd.InsertCmd(System.String,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified sound command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="soundPath">Full path of the sound file to play.  OK if null.</param>
            <param name="textBox">Textbox to insert the sound command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSoundCmd.GetText(System.String,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified sound command.
            </summary>
            <param name="soundPath">Path to sound, including any optional arguments.  OK if null.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtSoundCmd.Path">
            <summary>
            Gets or sets the full path of the sound file to play.
            If null, will not play any sound.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtTextCmd">
            <summary>
            (Pro) Sends text to a window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtTextCmd.#ctor">
            <summary>
            Constructs a command that sends text to a window.
            By default, no text is sent.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtTextCmd.#ctor(System.String)">
            <summary>
            Constructs a command that sends the specified text to a window.
            </summary>
            <param name="sendText">Any text; OK if null or blank</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtTextCmd.InsertCmd(System.String,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified text command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="sendText">Text string to insert. Ignored if null.</param>
            <param name="textBox">Textbox to insert the text command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtTextCmd.GetText(System.String,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified text command.
            </summary>
            <param name="sendText">Text to send</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtTextCmd.Text">
            <summary>
            Gets or sets the text that should be sent to a window.
            Can be anything or null.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtUnknownCmd">
            <summary>
            (Pro) This command is unknown but its text is retained so that it may be corrected.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtUnknownCmd.#ctor">
            <summary>
            Constructs a blank unknown command.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtUnknownCmd.#ctor(System.String)">
            <summary>
            Constructs an unknown command.
            </summary>
            <param name="cmdText">Unknown command text.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtUnknownCmd.InsertCmd(System.String,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified unknown command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="unknownCommand">Text for the unknown command.</param>
            <param name="textBox">Textbox to insert the unknown command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtUnknownCmd.GetText(System.String,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets the text for the specified unknown command.
            </summary>
            <param name="cmdText">Unknown command text. Can be anything.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtUnknownCmd.CommandText">
            <summary>
            Gets or sets the unknown command text.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtWhitespaceCmd">
            <summary>
            (Pro) Adds a whitespace to the text version of a macro.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWhitespaceCmd.#ctor">
            <summary>
            Constructs a command that will insert whitespace into a macro.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWhitespaceCmd.#ctor(System.String)">
            <summary>
            Constructs a command that will insert 
            the specified whitespace into a macro.
            </summary>
            <param name="ws">Whitespace inserted into the macro.  Less than 0 is forced to 0.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWhitespaceCmd.GetText(System.String,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified whitespace command.
            </summary>
            <param name="ws">Whitespace to insert in the macro.</param>
            <param name="textType">What type of text to return.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtWhitespaceCmd.Whitespace">
            <summary>
            Gets or sets the whitespace to add to the macro.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtWindowCmd">
            <summary>
            (Pro) Executes a command on a window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindowCmd.#ctor">
            <summary>
            Constructs an empty window input command (Commands.None).
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindowCmd.#ctor(MiniTools.UI.Input.MtWindowCommands)">
            <summary>
            Constructs a window command.
            </summary>
            <param name="winCmd">Window command to execute</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindowCmd.InsertCmd(MiniTools.UI.Input.MtWindowCommands,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified window command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="windowCmd">Window command to insert. Ignored if null.</param>
            <param name="textBox">Textbox to insert the window command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindowCmd.InsertCmd(MiniTools.UI.Input.MtWindowCommands,System.Int32,System.Int32,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified window command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="windowCmd">Window command to insert. Ignored if null.</param>
            <param name="xValue">Horizontal value for window commands that require it.
            This will be the Left value for Move commands, 
            and the Width value for Resize commands.</param>
            <param name="yValue">Vertical value for window commands that require it.
            This will be the Top value for Move commands, 
            and the Height value for Resize commands.</param>
            <param name="textBox">Textbox to insert the window command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindowCmd.InsertCmd(MiniTools.UI.Input.MtWindowCommands,System.String,System.Windows.Forms.TextBox)">
            <summary>
            Inserts the specified window command into the text box
            at the next appropriate insertion point.
            </summary>
            <param name="windowCmd">Window command to insert. Ignored if null.</param>
            <param name="windowTitle">Window's title.</param>
            <param name="textBox">Textbox to insert the window command into. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindowCmd.GetText(MiniTools.UI.Input.MtWindowCommands,System.Int32,System.Int32,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified window command.
            </summary>
            <param name="windowCommand">Window command</param>
            <param name="xValue">Horizontal value for window commands that require it.
            This will be the Left value for Move commands, 
            and the Width value for Resize commands.</param>
            <param name="yValue">Vertical value for window commands that require it.
            This will be the Top value for Move commands, 
            and the Height value for Resize commands.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindowCmd.GetText(MiniTools.UI.Input.MtWindowCommands,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified window command.
            </summary>
            <param name="windowCommand">Window command</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindowCmd.GetText(MiniTools.UI.Input.MtWindowCommands,System.String,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified window command.
            </summary>
            <param name="windowCommand">Window command</param>
            <param name="windowTitle">Window's title.</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindowCmd.X">
            <summary>
            Gets or sets the horizontal value for window commands that require it.
            This will be the Left value for Move commands, 
            and the Width value for Resize commands.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindowCmd.Y">
            <summary>
            Gets or sets the vertical value for window commands that require it.
            This will be the Top value for Move commands, 
            and the Height value for Resize commands.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindowCmd.Command">
            <summary>
            Gets or sets the command that should be sent to a window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindowCmd.Title">
            <summary>
            Gets or sets the window title used for some window commands.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtWindowCommands">
            <summary>
            Commands that can be sent to a window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.None">
            <summary>
            Nothing happens.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.Activate">
            <summary>
            The window is activated (given focus).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.BringToFront">
            <summary>
            Brings the window to the front of the screen.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.Close">
            <summary>
            The window is asked to close.
            Note that to windows outside your process,
            this is just a suggestion.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.Maximize">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.Minimize">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.Move">
            <summary>
            Moves the window to another position.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.Resize">
            <summary>
            Sets the window's size.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.Restore">
            <summary>
            Restores the window to its original size and position 
            before it was maximized or minimized.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.SendToBack">
            <summary>
            Sends the window behind all other open windows.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowCommands.Title">
            <summary>
            Change the window's title bar text.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtFlagsTypeConverter">
            <summary>
            Enables flags enumerations to be edited in a properties box.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtFlagsTypeConverter.ApplyEnumValue">
            <summary>
            Checks/unchecks items based on the current value of the enum variable
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtFlagsTypeConverter.FillEnumMembers">
            <summary>
            Adds items to the checklistbox based on the members of the enum
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtFlagsTypeConverter.GetCurrentValue">
            <summary>
            Gets the current bit value corresponding to all checked items
            </summary>
            <returns></returns>
        </member>
        <member name="M:MiniTools.UI.Input.MtFlagsTypeConverter.UpdateCheckedItems(MiniTools.UI.Input.MtFlagsTypeConverterItem,System.Windows.Forms.CheckState)">
            <summary>
            Updates items in the checklistbox
            </summary>
            <param name="selectedItem">Item that was checked/unchecked</param>
            <param name="cs">Check state of that item</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtFlagsTypeConverter.UpdateCheckedItems(System.Int32)">
            <summary>
            Checks/Unchecks items depending on the bitvalue
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtFlagsTypeConverterItem">
            <summary>
            Represents an item in the checklist box.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtFlagsTypeConverterItem.IsMemberFlag(MiniTools.UI.Input.MtFlagsTypeConverterItem)">
            <summary>
            Returns true if this value is a member of the composite bit value
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtFlagsTypeConverterItem.IsFlag">
            <summary>
            Returns true if the value corresponds to a single bit being set.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtFlagsUIEditor">
            <summary>
            Represents the checklist box.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtHookDesigner">
            <summary>
            Custom designer for hooks.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHookDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Performs custom initialization for input hooks
            when dropped on the Visual Studio Designer.
            </summary>
            <param name="component">Associated hook.</param>
        </member>
        <member name="T:MiniTools.UI.Input.MtObjectTypeConverter">
            <summary>
            Enables object references to be edited in a properties box as strings.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtEventArgs">
            <summary>
            Base class for all events.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtEventArgs.Handled">
            <summary>
            Gets or sets whether this raw event was handled.
            If true, the input will not be passed on to any other applications.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyEventArgs">
            <summary>
            Keyboard event, either key down, press or up.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyEventArgs.#ctor">
            <summary>
            Constructs an empty event argument object so that it may be
            reused multiple times with the Reset() method.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyEventArgs.#ctor(System.Windows.Forms.Keys,MiniTools.UI.Input.MtKeyModifiers,System.Char,MiniTools.UI.Input.MtKeyEventTypes)">
            <summary>
            Constructs a key event argument object for the specified key.
            </summary>
            <param name="data">A Key value indicating the key that was pressed, plus any modifier keys such as Ctrl and Alt.</param>
            <param name="mods">Modifier keys that were pressed down when this event occurred.</param>
            <param name="c">Character typed as a result of this event.</param>
            <param name="type">What type of key event this is.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyEventArgs.Clone">
            <summary>
            Clones this key event arguments object.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventArgs.m_Flags">
            <summary>
            Additional information about this key event,
            stored in a single enum to conserve space.
            How this is stored is kept private.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyEventArgs.Reset(System.Windows.Forms.Keys,MiniTools.UI.Input.MtKeyModifiers,System.Char,MiniTools.UI.Input.MtKeyEventTypes)">
            <summary>
            Resets this event with the specified data.
            This is to re-use this object for multiple events.
            </summary>
            <param name="data">A Key value indicating the key that was pressed, plus any modifier keys such as Ctrl and Alt.</param>
            <param name="mods">Modifier keys that were pressed down when this event occurred.</param>
            <param name="c">Character typed as a result of this event</param>
            <param name="type">What type of key event this is</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyEventArgs.GetText(MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets the specified key pressed and any modifiers pressed down,
            converted to the specified type of text.
            </summary>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.KeyDown">
            <summary>
            Gets whether this is a KeyDown event.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.KeyPress">
            <summary>
            Gets whether this is a KeyPress event.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.EventType">
            <summary>
            Gets what type of keyboard event this was.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.KeyUp">
            <summary>
            Gets whether this is a KeyUp event.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.Handled">
            <summary>
            Gets or sets whether this key event was handled.
            If true, the input will not be passed on to any other applications.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.KeyChar">
            <summary>
            Gets the ASCII key character equivalent of the key that's pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.KeyCode">
            <summary>
            Gets the keyboard code for this event.
            This is the actual key that was pressed.
            This does not include any modifier keys that may be pressed down also.
            Examples include Keys.S, Keys.D2 and Keys.Shift.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.KeyData">
            <summary>
            Gets the Keys value indicating the key that was pressed,
            plus any modifier keys currently pressed.
            For example, Keys.C|Keys.Control for Ctrl+C.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.KeyValue">
            <summary>
            Gets the integer value for key that was pressed
            and the current state of the modifier keys.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.Alt">
            <summary>
            Gets whether the Alt key was pressed down when this event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.Control">
            <summary>
            Gets whether the Control key was pressed down when this event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.Modifiers">
            <summary>
            Gets the modifier keys that are pressed down for this event,
            OR'd together.  For example, Keys.Shift | Keys.Alt.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.ModifiersEx">
            <summary>
            Gets the extended modifier keys that are pressed down for this event,
            OR'd together.  For example, MtKeyModifiers.LShift | MtKeyModifiers.LAlt.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.Shift">
            <summary>
            Gets whether the Shift key was pressed down when this event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyEventArgs.KeyText">
            <summary>
            Gets the specified key pressed and any modifiers pressed down,
            converted to a user-friendly string.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyEventArgs.Flags">
            <summary>
            Additional information stored in a single enum to conserve space.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventArgs.Flags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventArgs.Flags.EventTypeDown">
            <summary>
            This is a KeyDown event.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventArgs.Flags.EventTypePress">
            <summary>
            This is a KeyPress event.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventArgs.Flags.EventTypeUp">
            <summary>
            This is a KeyUp event.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventArgs.Flags.EventTypes">
            <summary>
            Event types are stored in these flags.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventArgs.Flags.Handled">
            <summary>
            This event has been handled.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseEventArgs">
            <summary>
            Mouse event, either mouse down, press or up.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseEventArgs.#ctor">
            <summary>
            Constructs an empty event argument object so that it may be
            reused multiple times with the Reset() method.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseEventArgs.#ctor(MiniTools.UI.Input.MtMouseEventTypes,System.Windows.Forms.MouseButtons,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Drawing.Point,MiniTools.UI.Input.MtKeyModifiers,System.DateTime)">
            <summary>
            Constructs a mouse event argument for a mouse event.
            </summary>
            <param name="type">What type of mouse event this is</param>
            <param name="mouseButton">Button involved with the event</param>
            <param name="mouseButtonsDown">Mouse buttons that were down when this event occurred</param>
            <param name="clickCount">How many times the specified button has been clicked; 0-2</param>
            <param name="wheelDelta">Number of notches the mouse wheel has moved</param>
            <param name="mousePos">Coordinates of the mouse cursor position</param>
            <param name="modifiers">Modifier keys pressed down when this event occurred</param>
            <param name="time">When this event occurred</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseEventArgs.Clone">
            <summary>
            Clones this mouse event arguments object.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseEventArgs.Reset(MiniTools.UI.Input.MtMouseEventTypes,System.Int32)">
            <summary>
            Resets this event type.
            This is to re-use this object for multiple events.
            </summary>
            <param name="type">What type of mouse event this is</param>
            <param name="clickCount">How many times the specified button has been clicked; 0-2</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseEventArgs.Reset(MiniTools.UI.Input.MtMouseEventTypes,System.Windows.Forms.MouseButtons,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Drawing.Point,MiniTools.UI.Input.MtKeyModifiers,System.DateTime)">
            <summary>
            Resets this event with the specified data.
            This is to re-use this object for multiple events.
            </summary>
            <param name="type">What type of mouse event this is</param>
            <param name="mouseButton">Button involved with the event</param>
            <param name="mouseButtonsDown">Mouse buttons that were down when this event occurred</param>
            <param name="clickCount">How many times the specified button has been clicked; 0-2</param>
            <param name="wheelDelta">Number of notches the mouse wheel has moved</param>
            <param name="mousePos">Coordinates of the mouse cursor position</param>
            <param name="modifiers">Modifier keys pressed down when this event occurred</param>
            <param name="time">When this event occurred</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseEventArgs.GetText(MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets this mouse event converted to the specified type of text.
            </summary>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.Button">
            <summary>
            Gets the mouse button that was involved in this event.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.ButtonsDown">
            <summary>
            Gets the mouse buttons that were down when this event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.ButtonsDownAfter">
            <summary>
            Gets the mouse buttons that will be down after this event
            has been handled by the operating system.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.Clicks">
            <summary>
            Gets the number of mouse clicks that have occurred in succession
            (i.e., within the double-click time).
            Will be 0-2.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.Delta">
            <summary>
            Gets the signed value of the amount the mouse wheel has moved.
            Positive value means the wheel was moved up; negative means the wheel was moved down.
            A Delta value of 120 indicates the wheel has moved one notch.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.EventType">
            <summary>
            Gets what type of event this is.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.MouseClick">
            <summary>
            Gets whether a mouse button was clicked down once.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.MouseDoubleClick">
            <summary>
            Gets whether a mouse button was clicked down twice in succession.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.MouseDown">
            <summary>
            Gets whether a mouse button was clicked down.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.MouseMove">
            <summary>
            Gets whether the mouse cursor was moved.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.MouseUp">
            <summary>
            Gets whether a mouse button was clicked down.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.MouseWheel">
            <summary>
            Gets whether the mouse wheel was rotated.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.Handled">
            <summary>
            Gets or sets whether this mouse event was handled.
            If true, the input will not be passed on to any other applications.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.Alt">
            <summary>
            Gets whether the Alt key was pressed down when this mouse event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.Control">
            <summary>
            Gets whether the Control key was pressed down when this mouse event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.ModifierKeys">
            <summary>
            Gets the modifier keys (Alt, Ctrl, Shift) that were pressed down
            when this mouse event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.ModifierKeysEx">
            <summary>
            Gets the extended modifier keys (LAlt, RAlt, etc.) that were pressed down
            when this mouse event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.Shift">
            <summary>
            Gets whether the Shift key was pressed down when this mouse event occurred.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.MousePosition">
            <summary>
            Gets the position of the mouse cursor when this event occurred.
            This is in pixels relative to the upper left corner of the screen which is 0,0.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.X">
            <summary>
            Gets the X (horizontal) position of the mouse cursor when this event occurred.
            This is in pixels relative to the upper left corner of the screen which is 0,0.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.Y">
            <summary>
            Gets the Y (vertical) position of the mouse cursor when this event occurred.
            This is in pixels relative to the upper left corner of the screen which is 0,0.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.MouseText">
            <summary>
            Gets this mouse event in a user-friendly string.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseEventArgs.EventTime">
            <summary>
            Gets when this event occurred.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtRawEventArgs">
            <summary>
            Raw input event.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtRawEventArgs.#ctor">
            <summary>
            Constructs an empty raw event argument object so that it may be
            reused multiple times with the Reset() method.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtRawEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a raw event argument object.
            </summary>
            <param name="l">lParam parameter of the message.</param>
            <param name="m">Message value.</param>
            <param name="w">wParam parameter of the message.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtRawEventArgs.Clone">
            <summary>
            Clones this raw event arguments object.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtRawEventArgs.Reset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets this event with the specified data.
            This is to re-use this object for multiple events.
            </summary>
            <param name="l">lParam parameter of the message.</param>
            <param name="m">Message value.</param>
            <param name="w">wParam parameter of the message.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtRawEventArgs.Handled">
            <summary>
            Gets or sets whether this raw event was handled.
            If true, the input will not be passed on to any other applications.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtRawEventArgs.LParam">
            <summary>
            Gets the message's lParam.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtRawEventArgs.Msg">
            <summary>
            Gets the message number.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtRawEventArgs.WParam">
            <summary>
            Gets the message's wParam.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputBug">
            <summary>
            Derived exception class used to communicate program errors,
            i.e., bugs or problems that should not have occurred.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputException">
            <summary>
            Base class for all input exceptions.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputException.#ctor(System.String,System.String)">
            <summary>
            Constructs a new data exception.
            </summary>
            <param name="errorMsg">Plain speak error message</param>
            <param name="errorIDText">Unique ID of this error</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs a new secondary data exception,
            i.e., an exception thrown as a result of another exception.
            </summary>
            <param name="errorMsg">Plain speak error message</param>
            <param name="errorIDText">Unique ID of this error</param>
            <param name="cause">Exception that caused this exception</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputException.IDText">
            <summary>
            Gets the ID string for this error.
            Each exception is assigned a unique ID.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputBug.#ctor(System.String)">
            <summary>
            Constructs a new form bug exception.
            </summary>
            <param name="errorIDText">Unique ID of this error</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputBug.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new secondary form bug exception,
            i.e., an exception thrown as a result of another exception.
            </summary>
            <param name="errorIDText">Unique ID of this error</param>
            <param name="cause">Exception that caused this exception</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputBug.ErrorIDMessage">
            <summary>
            Gets or sets the error message that prefixes the error ID.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputError">
            <summary>
            Derived exception class used to communicate normal errors,
            i.e., errors that might be expected to occur during the normal course
            of using an application, e.g., trying to open a file that isn't there.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputError.#ctor(System.String)">
            <summary>
            Constructs a new form error.
            </summary>
            <param name="errorIDText">Unique ID of this error</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputError.ErrorIDMessage">
            <summary>
            Gets or sets the error message that prefixes the error ID.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtAppHook">
            <summary>
            Application-wide hook that's required for all application and form hooks,
            which all should share the same MtAppHook for efficiency.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtHook">
            <summary>
            Abstract base class for all global hooks.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.#ctor">
            <summary>
            Constructs a hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.HandleDisposed(System.Object,System.EventArgs)">
            <summary>
            Handles when the associated form (if any) has been disposed
            by uninstalling this hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.OnReuseEventArgsChanged">
            <summary>
            Called when the ReuseEventArgs property has changed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.EventCheck(MiniTools.UI.Input.MtEventArgs)">
            <summary>
            Override to raise the appropriate Check event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.AddToEventQueue(MiniTools.UI.Input.MtEventArgs)">
            <summary>
            Adds the specified event to the multi-threaded event queue.
            </summary>
            <param name="e">Event arguments to add to the queue.  Cannot be null.</param>
        </member>
        <member name="F:MiniTools.UI.Input.MtHook.m_EventQueue">
            <summary>
            Holds the events so that they can be processed by another thread.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHook.m_EventQueueSync">
            <summary>
            Synchronized queue to prevent deadlocks.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHook.m_EventQueueSignal">
            <summary>
            Signal used to tell the event processor when to process another event.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHook.m_EventQueueThread">
            <summary>
            Events can be processed in a separate thread.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHook.m_EventQueueThreadTerminated">
            <summary>
            Flag used to terminate the event queue thread.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.InitializeEventQueue">
            <summary>
            Initializes the event queue.  OK to call if already initialized.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.ProcessEventQueue">
            <summary>
            Called by a separate thread to processed queued events.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.RaiseEvent(MiniTools.UI.Input.MtEventArgs)">
            <summary>
            Raises the specified event if anyone has subscribed.
            </summary>
            <returns>Returns whether the event was handled.</returns>
            <param name="e">Event arguments. Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.RaisedEvent(MiniTools.UI.Input.MtEventArgs)">
            <summary>
            Override to be notified when an event was raised.
            </summary>
            <param name="e">Event to raise. Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.CreateAppHook(MiniTools.UI.Input.MtAppHook)">
            <summary>
            Gets the application hook needed for this hook.
            Not required for global hooks.
            </summary>
            <param name="hook">Application hook to use; if null, will use default MtAppHook.Current</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.InstallAppHook">
            <summary>
            Installs the associated application hook.
            You must call CreateAppHook() before this method.
            Not required for global hooks.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.UninstallAppHook">
            <summary>
            Uninstalls the associated application hook.
            OK to call multiple times.
            Not required for global hooks.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.BeginInit">
            <summary>
            Tells this hook we are about to batch initialize it.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.EndInit">
            <summary>
            Tells this hook we are done initializing it.
            If AutoInstall is true, this hook will install itself.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.Install">
            <summary>
            Installs this hook in the list of input hooks.
            Ignored if already installed.
            You can also use the Enabled property to temporarily
            turn on/off this hook from receiving input and generating events
            without installing/uninstalling the hook.
            Returns whether the hook was successfully installed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.InstallDerived">
            <summary>
            Override to install this hook in the list of input hooks.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.Uninstall">
            <summary>
            Uninstalls this hook from the list of input hooks.
            Ignored if not installed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.UninstallDerived">
            <summary>
            Override to uninstall this hook from the list of input hooks.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.GetRawEventArgs">
            <summary>
            Gets a raw arguments object to be used for a new event
            and that can be set with the Reset method.
            If ReuseEventArgs is true and MultiThreaded is false,
            then this will return a cached argument object that can be reused.
            Otherwise it will create a new argument object.
            Guaranteed to be non-null.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.GetRawEventArgs(MiniTools.UI.Input.MtRawEventArgs)">
            <summary>
            Gets a raw arguments object to be used for a new event
            based on the specified arguments object.
            If ReuseEventArgs is true and MultiThreaded is false,
            then this will return a cached argument object that can be reused.
            Otherwise it will create a new argument object 
            based on the specified arguments object.
            Guaranteed to be non-null.
            </summary>
            <param name="e">The arguments to clone.  If null, will create arguments from scratch.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.OnEnabledRawEventsChanged">
            <summary>
            Called when the EnabledRawEvents property has been changed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.RaiseRawEvent(System.Int32,System.Int32,System.Int32)">
            <summary>
            Raises the specified raw event if anyone has subscribed.
            Check the EnabledRawEvents property before calling this method.
            </summary>
            <returns>Returns whether this event was handled.</returns>
            <param name="msg">Message number</param>
            <param name="wParam">wParam of the message</param>
            <param name="lParam">lParam of the message</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.RaisedRawEvent(MiniTools.UI.Input.MtEventArgs)">
            <summary>
            Raises the multi-threaded event if anyone has subscribed.
            This event has been removed from a queue by a separate thread.
            </summary>
            <param name="e">Event to raise. Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.CloseThreadWindow">
            <summary>
            Closes the window used to capture messages in a separate thread.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHook.m_Form">
            <summary>
            Hidden form that creates message pump used for multi-threading
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.ThreadMethod">
            <summary>
            Method to launch a hook in a separate thread.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.OnSetMultiThreaded">
            <summary>
            Override to be notified when this hook is being made multi-threaded.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.SetWindowsHookEx(System.Int32,MiniTools.UI.Input.MtHook.HookProc,System.IntPtr,System.Int32)">
            <summary>
            Sets the hook into the hook chain.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.UnhookWindowsHookEx(System.Int32)">
            <summary>
            Removes the hook from the hook chain.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHook.CallNextHookEx(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Calls the next hook in the chain of hooks.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.IsCombo">
            <summary>
            Gets whether this hook is a combination hook,
            i.e., represents a collection of one or more hooks.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.Control">
            <summary>
            Gets or sets the associated control.
            For control hooks, this is the control the hook will monitor.
            For all other hooks, you can attach the hook to the control so that
            when the control is disposed, this hook is automatically uninstalled.
            This is a handy way to ensure that your application will not throw
            an exception when an event occurs after a control has been disposed.
            Set to null to disassociate the control.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.HostingControl">
            <summary>
            Gets or sets the control that hosts this component.
            This is used primarily for designer support.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.InDesignMode">
            <summary>
            Determine if we are in design mode.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.Enabled">
            <summary>
            Gets or sets whether this hook is enabled.
            Note that this hook must also be Installed to receive input.
            By default this hook is enabled and 
            immediately begins operating when you Install() it.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.ReuseEventArgs">
            <summary>
            Gets or sets whether to re-use the event argument objects.
            If true, the same object is used for all events,
            greatly reducing memory usage and garbage collection.
            This is ignored and assumed false if MultiThreaded is true 
            because events are processed asynchronously and cannot be reused.
            Default is true.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.AppHook">
            <summary>
            Gets the associated application hook.
            May be null if this is a global hook.
            Note that all other scopes of hook (app, form, control) 
            require an application hook, and hence this will be non-null
            for those scopes.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.AutoInstall">
            <summary>
            Gets or sets whether to automatically install this hook in the EndInit method.
            This is primarily used for the designer.  If called from your code, be sure to call EndInit or Install.
            Default is true.  
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.IsInstalled">
            <summary>
            Gets whether this hook is installed in the list of input hooks
            and able to receive input.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.Name">
            <summary>
            Gets or sets the name of this hook.
            For your use.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.EnabledRawEvents">
            <summary>
            Gets or sets whether raw events are enabled for this hook.
            Default is false.
            Subscribe to the RawEvent event to receive raw input events.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtHook.RawEvent">
            <summary>
            Raised when a raw input event has occurred.
            This generates a LOT of messages quickly, 
            so in general you should not subscribe to this event 
            unless absolutely necessary, 
            and you must be efficient in your handling of these messages.
            This is for advanced use only.
            EnabledRawEvents must be set to true to receive events.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtHook.RawEventCheck">
            <summary>
            Raised when a raw input event has occurred in a multi-threaded hook.
            If you want to suppress input, this is where you set e.Handled = true.
            This generates a LOT of messages quickly, 
            so in general you should not subscribe to this event 
            unless absolutely necessary, 
            and you must be efficient in your handling of these messages.
            This is for advanced use only.
            EnabledRawEvents must be set to true to receive events.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.RawEventSubscribed">
            <summary>
            Gets whether anyone has subscribed to the raw event
            and if EnabledRawEvents is true.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.Scope">
            <summary>
            Gets the scope of this hook.
            Each derived hook has its own scope on which it operates.
            The scope is set at construction.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.IsGlobal">
            <summary>
            Gets whether this is a global hook.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.Tag">
            <summary>
            Gets or sets a user-defined object associated with this hook.
            For your use.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.MultiThreadedHook">
            <summary>
            Gets whether the hook itself is launched into a separate thread.
            Returns true if MultiThreaded and IsGlobal.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.MultiThreaded">
            <summary>
            Gets or sets whether this hook runs in a separate thread.
            To make this hook multithreaded, set to true before you Install().
            Default is false.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHook.Type">
            <summary>
            Gets what type of input hook this is.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtHook.HookProc">
            <summary>
            Method called when an event has occurred 
            that needs to be handled by this hook.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtHook.CloseThreadWindowCallback">
            <summary>
            This delegate enables asynchronous calls for 
            enabling the Close button.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.#ctor">
            <summary>
            Constructs an application hook.
            Be sure to call Install() to install and start this hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.GetCurrent">
            <summary>
            Gets the current singleton application hook,
            creating it if necessary.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.OnReuseEventArgsChanged">
            <summary>
            Sets all the hooks to the correct ReuseEventArgs value.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            IMessageFilter, method called by application-level hook (filter)
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.InstallDerived">
            <summary>
            Starts this application hook and adds it to the hook chain.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.InstallHook(MiniTools.UI.Input.MtHook)">
            <summary>
            Installs the specified keyboard hook into the list of hooks
            for this application.
            </summary>
            <param name="hook">Ignored if null or not a hook that requires an application hook.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.InstallHook(MiniTools.UI.Input.MtKeyboardAppHook)">
            <summary>
            Installs the specified keyboard hook into the list of keyboard hooks
            for this application.
            </summary>
            <param name="keyHook">Ignored if null or already installed</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.InstallHook(MiniTools.UI.Input.MtMouseAppHook)">
            <summary>
            Installs the specified mouse hook into the list of mouse hooks
            for this application.
            </summary>
            <param name="mouseHook">Ignored if null or already installed</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.CheckUninstall">
            <summary>
            If all child hooks have been uninstalled,
            this hook is uninstalled.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.UninstallDerived">
            <summary>
            Stops this hook and removes it from the hook chain.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.UninstallHook(MiniTools.UI.Input.MtHook)">
            <summary>
            Uninstalls the specified hook from the list of hooks
            for this application.
            </summary>
            <param name="hook">Ignored if null or not a hook that requires an application hook.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.UninstallHook(MiniTools.UI.Input.MtKeyboardAppHook)">
            <summary>
            Uninstalls the specified keyboard hook from the list of keyboard hooks
            for this application.
            </summary>
            <param name="keyHook">Ignored if null or already uninstalled</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.UninstallHook(MiniTools.UI.Input.MtMouseAppHook)">
            <summary>
            Uninstalls the specified mouse hook from the list of mouse hooks
            for this application.
            </summary>
            <param name="mouseHook">Ignored if null or already uninstalled</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.GetKeyboardState(System.Byte[])">
            <summary>
            Gets the current state of all virtual keys.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtAppHook.ToAsciiEx(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Converts the specified virtual key code to the ASCII character pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtAppHook.Current">
            <summary>
            Gets the current singleton hook for this application.
            This hook is used by default by all application and form-level hooks
            for efficiency.
            May be null if no application hook was created.
            Call GetCurrent() if you want to create an app hook if needed.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtHookScopes">
            <summary>
            MtHookScopes at which a hook can operate.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookScopes.None">
            <summary>
            Uninitialized state.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookScopes.Global">
            <summary>
            Input is received before any application.
            This is used for global hot keys, etc.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookScopes.App">
            <summary>
            Input is received before any form in your application.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookScopes.Form">
            <summary>
            Input is received before any control in a specific form.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookScopes.Control">
            <summary>
            Input is received before a specific control in a specific form.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtHookTypes">
            <summary>
            Describes what type(s) of input a hook monitors.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.None">
            <summary>
            No hooks.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.KeyboardGlobal">
            <summary>
            Keyboard global hook
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.KeyboardApp">
            <summary>
            Keyboard application hook
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.KeyboardForm">
            <summary>
            Keyboard form hook
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.KeyboardControl">
            <summary>
            Keyboard control hook
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.MouseGlobal">
            <summary>
            Mouse global hook
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.MouseApp">
            <summary>
            Mouse application hook
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.MouseForm">
            <summary>
            Mouse form hook
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.MouseControl">
            <summary>
            Mouse control hook
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.Keyboard">
            <summary>
            All keyboard input on all scopes
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.Mouse">
            <summary>
            All mouse input on all scopes
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.Global">
            <summary>
            All keyboard and mouse input on a global scope
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.App">
            <summary>
            All keyboard and mouse input on an application scope
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.Form">
            <summary>
            All keyboard and mouse input on a form scope
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.Control">
            <summary>
            All keyboard and mouse input on a control scope
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHookTypes.All">
            <summary>
            All input hooks
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyboardAppHook">
            <summary>
            Application-level keyboard hook that enables you to see
            all keyboard activity in your application before the application's UI.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyboardBaseHook">
            <summary>
            Base class for all keyboard hooks.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardBaseHook.#ctor">
            <summary>
            Constructs a keyboard hook.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyboardBaseHook.m_KeyEventArgs">
            <summary>
            Cached arguments for reusing mouse events
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardBaseHook.GetKeyEventArgs">
            <summary>
            Gets an arguments object to be used for a new event
            and that can be set with the Reset method.
            If ReuseEventArgs is true and MultiThreaded is false,
            then this will return a cached argument object that can be reused.
            Otherwise it will create a new argument object.
            Guaranteed to be non-null.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardBaseHook.GetKeyEventArgs(MiniTools.UI.Input.MtKeyEventArgs)">
            <summary>
            Gets an arguments object to be used for a new event
            based on the specified arguments object.
            If ReuseEventArgs is true and MultiThreaded is false,
            then this will return a cached argument object that can be reused.
            Otherwise it will create a new argument object 
            based on the specified arguments object.
            Guaranteed to be non-null.
            </summary>
            <param name="e">Event arguments to clone. OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardBaseHook.RaisedEvent(MiniTools.UI.Input.MtEventArgs)">
            <summary>
            Raises the specified event if anyone has subscribed.
            </summary>
            <param name="eventArgs">Key event arguments.  Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardBaseHook.ResetState">
            <summary>
            Clears out any internal state in case the hook gets confused.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtKeyboardBaseHook.KeyEventCheck">
            <summary>
            Raised when a key event occurs.
            If this hook is multithreaded, this event is where you want
            to set e.Handled=true to suppess the key event.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtKeyboardBaseHook.KeyDown">
            <summary>
            Raised when a key is pressed down.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtKeyboardBaseHook.KeyEvent">
            <summary>
            Raised when a keyboard event occurs.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtKeyboardBaseHook.KeyPress">
            <summary>
            Raised when a key and any modifiers keys have been pressed
            down to type a character or enter a command.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboardBaseHook.EnabledEventTypes">
            <summary>
            Gets or sets which key event types to raise.
            By default, this hook monitors for all key events.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtKeyboardBaseHook.KeyUp">
            <summary>
            Raised when a key is released.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboardBaseHook.ResetStateTimeMS">
            <summary>
            Gets or sets the amount of time (in milliseconds)
            that must elapse between keyboard events before the 
            internal state of the hook is reset.
            This allows the user to pause for a few seconds
            if for some reason the hook becomes confused.
            Default is 5000ms (5 seconds).
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardAppHook.#ctor">
            <summary>
            Constructs a keyboard application hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardAppHook.#ctor(MiniTools.UI.Input.MtAppHook)">
            <summary>
            Constructs a keyboard application hook,
            using the specified application hook.
            When creating multiple Application, Form or Control hooks,
            be sure they all share the same MtAppHook for the best performance.
            </summary>
            <param name="appHook">Application-wide hook that this hook will use. If null, will use the default application hook.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardAppHook.InstallDerived">
            <summary>
            Starts this keyboard hook and adds it to the hook chain.
            Ignored if already installed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardAppHook.UninstallDerived">
            <summary>
            Stops this keyboard hook and removes it from the hook chain.
            Ignored if already uninstalled.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyboardControlHook">
            <summary>
            Form-level keyboard hook that enables you to see
            all keyboard activity in a specified form before the form sees it.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardControlHook.#ctor">
            <summary>
            Constructs a keyboard control hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardControlHook.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructs a keyboard control hook for the specified control.
            </summary>
            <param name="control">Control whose keyboard input to monitor. If null, hook will not monitor anything.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardControlHook.#ctor(MiniTools.UI.Input.MtAppHook,System.Windows.Forms.Control)">
            <summary>
            Constructs a keyboard control hook.
            When creating multiple Application, Control or Control hooks,
            be sure they all share the same MtAppHook for the best percontrolance.
            </summary>
            <param name="appHook">Application-wide hook that this hook will use; if null, will create an app hook</param>
            <param name="control">Control whose keyboard input to monitor; cannot be null</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboardControlHook.Form">
            <summary>
            Gets the form that is being monitored by this control hook.
            May be null if the control is not connected to a form.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyboardFormHook">
            <summary>
            Form-level keyboard hook that enables you to see
            all keyboard activity in a specified form before the form sees it.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardFormHook.#ctor">
            <summary>
            Constructs a keyboard form hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardFormHook.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructs a keyboard form hook for the specified form.
            </summary>
            <param name="frm">Form whose keyboard input to monitor. If null, hook will not monitor anything.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardFormHook.#ctor(MiniTools.UI.Input.MtAppHook,System.Windows.Forms.Form)">
            <summary>
            Constructs a keyboard form hook.
            When creating multiple Application, Form or Control hooks,
            be sure they all share the same MtAppHook for the best performance.
            </summary>
            <param name="appHook">Application-wide hook that this hook will use; if null, will create an app hook</param>
            <param name="frm">Form whose keyboard input to monitor; cannot be null</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboardFormHook.Form">
            <summary>
            Gets or sets the form that is being monitored by this keyboard hook.
            May be null if this hook is not attached to a form
            (in which case the hook doesn't monitor for anything).
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyboardGlobalHook">
            <summary>
            Global keyboard hook that enables you to see all keyboard activity
            even in other applications and even if your application has no UI.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardGlobalHook.#ctor">
            <summary>
            Constructs a keyboard global hook.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyboardGlobalHook.m_KeyboardHook">
            <summary>
            Keyboard hook handle
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardGlobalHook.InstallDerived">
            <summary>
            Starts this keyboard hook and adds it to the hook chain.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardGlobalHook.ResetState">
            <summary>
            Clears out any internal state in case the hook gets confused.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardGlobalHook.GetKeyboardState(System.Byte[])">
            <summary>
            Gets the current state of all keys.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardGlobalHook.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Converts the specified virtual key code to the ASCII character pressed.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseAppHook">
            <summary>
            Application-level mouse hook that enables you to see
            all mouse activity in your application before the application's UI.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseBaseHook">
            <summary>
            Base class for all mouse hooks.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseBaseHook.#ctor">
            <summary>
            Constructs a mouse hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseBaseHook.GetMouseEventArgs">
            <summary>
            Gets an arguments object to be used for a new event
            and that can be set with the Reset method.
            If ReuseEventArgs is true and MultiThreaded is false,
            then this will return a cached argument object that can be reused.
            Otherwise it will create a new argument object.
            Guaranteed to be non-null.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseBaseHook.GetMouseEventArgs(MiniTools.UI.Input.MtMouseEventArgs)">
            <summary>
            Gets an arguments object to be used for a new event
            based on the specified arguments object.
            If ReuseEventArgs is true and MultiThreaded is false,
            then this will return a cached argument object that can be reused.
            Otherwise it will create a new argument object 
            based on the specified arguments object.
            Guaranteed to be non-null.
            </summary>
            <param name="e">Event arguments to clone. OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseBaseHook.RaisedEvent(MiniTools.UI.Input.MtEventArgs)">
            <summary>
            Called when a mouse event has been raised.
            </summary>
            <param name="eventArgs">Mouse event arguments.  Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseBaseHook.EventOccurred(MiniTools.UI.Input.MtMouseEventArgs,System.Int32,System.Int32)">
            <summary>
            Gets whether a mouse event occurred based on the input parameter.
            Populates the MtMouseEventArgs with the event info.
            </summary>
            <param name="e">Event args to populate; cannot be null</param>
            <param name="wParam">Input parameter generated for this event</param>
            <param name="mouseData">Mouse data about this event</param>
            <returns>Whether a mouse event occurred</returns>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseBaseHook.ClickEventOccurred(MiniTools.UI.Input.MtMouseEventArgs,System.Boolean)">
            <summary>
            Gets whether a click or double-click event occurred.
            Populates the MtMouseEventArgs with the appropriate information.
            </summary>
            <param name="e">Event args to use; cannot be null</param>
            <param name="allow_double_clicks">Whether double-click events are allowed</param>
        </member>
        <member name="E:MiniTools.UI.Input.MtMouseBaseHook.MouseEventCheck">
            <summary>
            Raised when a mouse event occurs.
            If this hook is multithreaded, this event is where you want
            to set e.Handled=true to suppess the mouse event.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtMouseBaseHook.MouseClick">
            <summary>
            Raised when a mouse button is clicked once.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtMouseBaseHook.MouseDoubleClick">
            <summary>
            Raised when the same mouse button is clicked twice in quick succession.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtMouseBaseHook.MouseDown">
            <summary>
            Raised when a mouse button is pressed down.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtMouseBaseHook.MouseEvent">
            <summary>
            Raised when a mouse event occurs.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtMouseBaseHook.MouseMove">
            <summary>
            Raised when the mouse pointer is moving.
            Warning: This will generate a lot of messages.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseBaseHook.EnabledEventTypes">
            <summary>
            Gets or sets which mouse event types to raise.
            By default, this hook monitors for all mouse events.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtMouseBaseHook.MouseUp">
            <summary>
            Raised when a mouse button is released.
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtMouseBaseHook.MouseWheel">
            <summary>
            Raised when the mouse wheel was rotated.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseAppHook.#ctor">
            <summary>
            Constructs a mouse application hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseAppHook.#ctor(MiniTools.UI.Input.MtAppHook)">
            <summary>
            Constructs a mouse application hook,
            using the specified application hook.
            When creating multiple Application, Form or Control hooks,
            be sure they all share the same MtAppHook for the best performance.
            </summary>
            <param name="appHook">Application-wide hook that this hook will use. If null, will use the default application hook.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseAppHook.InstallDerived">
            <summary>
            Starts this mouse hook and adds it to the hook chain.
            Ignored if already installed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseAppHook.UninstallDerived">
            <summary>
            Stops this mouse hook and removes it from the hook chain.
            Ignored if already uninstalled.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseControlHook">
            <summary>
            Control-level mouse hook that enables you to see
            all mouse activity in a specified control before the control sees it.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseControlHook.#ctor">
            <summary>
            Constructs a mouse control hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseControlHook.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructs a mouse control hook for the specified control.
            </summary>
            <param name="control">Control whose mouse input to monitor. If null, hook will not monitor anything.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseControlHook.#ctor(MiniTools.UI.Input.MtAppHook,System.Windows.Forms.Control)">
            <summary>
            Constructs a mouse control hook.
            When creating multiple Application, Control or Control hooks,
            be sure they all share the same MtAppHook for the best percontrolance.
            </summary>
            <param name="appHook">Application-wide hook that this hook will use; if null, will create an app hook</param>
            <param name="control">Control whose mouse input to monitor; cannot be null</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseControlHook.Form">
            <summary>
            Gets the form that is being monitored by this control hook.
            May be null if the control is not connected to a form.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseFormHook">
            <summary>
            Form-level mouse hook that enables you to see
            all mouse activity in a specified form before the form sees it.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseFormHook.#ctor">
            <summary>
            Constructs a mouse form hook.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseFormHook.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructs a mouse form hook for the specified form.
            </summary>
            <param name="frm">Form whose mouse input to monitor. If null, hook will not monitor anything.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseFormHook.#ctor(MiniTools.UI.Input.MtAppHook,System.Windows.Forms.Form)">
            <summary>
            Constructs a mouse form hook.
            When creating multiple Application, Form or Control hooks,
            be sure they all share the same MtAppHook for the best performance.
            </summary>
            <param name="appHook">Application-wide hook that this hook will use; if null, will create an app hook</param>
            <param name="frm">Form whose mouse input to monitor; cannot be null</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouseFormHook.Form">
            <summary>
            Gets or sets the form that is being monitored by this mouse hook.
            May be null if this hook is not attached to a form
            (in which case the hook doesn't monitor for anything).
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseGlobalHook">
            <summary>
            Global mouse hook that enables you to see all mouse activity
            even in other applications and even if your application has no UI.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseGlobalHook.#ctor">
            <summary>
            Constructs a mouse global hook.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseGlobalHook.m_MouseHook">
            <summary>
            Mouse hook handle
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseGlobalHook.InstallDerived">
            <summary>
            Starts this mouse hook and adds it to the hook chain.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouseGlobalHook.UninstallDerived">
            <summary>
            Stops and removes this hook.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtRawEventHandler">
            <summary>
            Method called when a raw event occurs.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyboard">
            <summary>
            General keyboard utilities and properties.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyboard.KL_NAMELENGTH">
            <summary>
            Length of the keyboard layout name
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetKeyCode(System.Windows.Forms.Keys)">
            <summary>
            Gets the keyboard code for the specified Keys value.
            This is the actual key that was pressed.
            This does not include any modifier keys that may be pressed down also.
            </summary>
            <example>Examples include Keys.S, Keys.D2 and Keys.Shift.</example>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetDigitKey(System.Int32)">
            <summary>
            Given an offset from the digit zero (0 = '0', 9 = '9')
            this returns the corresponding Keys.D0 through Keys.D9
            </summary>
            <param name="offsetFrom0">Zero-based offset from '0'.  Will be forced into 0-9</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetFunctionKey(System.Int32)">
            <summary>
            Given an offset from the F1 key (0 = F1, 23 = F24)
            this returns the corresponding Keys.F1 through Keys.F24
            </summary>
            <param name="offsetFromF1">Zero-based offset from F1.  Will be forced into 0-23</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetLetterKey(System.Int32)">
            <summary>
            Given an offset from the letter A (0 = 'A', 25 = 'Z')
            this returns the corresponding Keys.A through Keys.Z
            </summary>
            <param name="offsetFromA">Zero-based offset from 'A'.  Will be forced into 0-25</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetNumPadDigitKey(System.Int32)">
            <summary>
            Given an offset from the digit zero (0 = '0', 9 = '9')
            this returns the corresponding Keys.NumPad0 through Keys.NumPad9
            </summary>
            <param name="offsetFrom0">Zero-based offset from '0'.  Will be forced into 0-9</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetModifiers(System.Windows.Forms.Keys)">
            <summary>
            Gets the modifier keys (OR'd together) that are pressed down 
            for the specified Keys value.  For example: Keys.Shift | Keys.Alt.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsAlt(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Alt key is pressed for the specified key.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsAltOnly(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Alt key is the only modifier key pressed.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsBrowserKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a browser key:
            BrowserBack through BrowserHome
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsControlAltOnly(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Control and Alt keys are the only modifier keys pressed.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsControlShiftOnly(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Control and Shift keys are the only modifier keys pressed.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsAltShiftOnly(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Alt and Shift keys are the only modifier keys pressed.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsControlAltShiftOnly(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Control, Alt, and Shift keys 
            are the only modifier keys pressed.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsCommand(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is considered a command key.
            A command key is a anything with the Alt and/or Ctrl key pressed,
            one of the function keys (F1-F24), or one of the special keys
            such as Enter, PageUp, Left, etc.
            Command keys are typically not typed into the current field,
            but instead are used to control the program in some way.
            Note that IsTypeable = !IsCommand.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsControl(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Control key is pressed for the specified key.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsControlOnly(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Control key is the only modifier key pressed.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsCursorKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a cursor key:
            Left, Up, Right or Down.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsDigitKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a digit key,
            either D0 through D9 or NumPad0 through NumPad9.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsNormalDigitKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a plain digit key:
            D0 through D9 (but not NumPad0 through NumPad9).
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsNumPadDigitKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a numerical pad digit key:
            NumPad0 through NumPad9 (but not D0 through D9).
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is currently pressed down.
            </summary>
            <param name="key">Any key. Modifiers are ignored.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsFunctionKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a function key:
            F1 through F24.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsLaunchKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a launch key:
            LaunchMail, LaunchApplication1 or LaunchApplication2.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsLetterKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a letter key:
            A through Z.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsMathKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a math key:
            Multiply, Add, Subtract, Decimal or Divide.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsMediaKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a media key:
            MediaNextTrack, MediaPreviousTrack, MediaStop or MediaPlayPause.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsModified(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key has one or more modifiers keys pressed.
            Note that IsPlain = !IsModified.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsModiferKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a modifer key:
            ShiftKey, ControlKey, or Menu.
            LShiftKey, RShiftKey, LControlKey, RControlKey, LMenu or RMenu.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsNavigationKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a navigation key:
            PageUp, PageDown, Home or End.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsPlain(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key has no modifiers keys pressed.
            Note that IsPlain = !IsModified.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsShift(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Shift key is pressed for the specified key.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsShiftOnly(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the Shift key is the only modifier key pressed.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsSymbolKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a symbol key:
            OemSemicolon through Oemtilde, or OemOpenBrackets through OemQuotes.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsTypeable(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is considered a typeable key.
            A typeable key is a that when pressed will type a character
            into the current field.
            Typeable keys do not have the Alt and/or Ctrl key pressed,
            one of the function keys (F1-F24), or one of the special keys
            such as Enter, PageUp, Left, etc.
            Note that IsTypeable = !IsCommand.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsKeyUp(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is currently release (not pressed).
            </summary>
            <param name="key">Any key. Modifiers are ignored.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.IsVolumeKey(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is a volume key:
            VolumeMute, VolumeDown or VolumeUp.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetModifiers(MiniTools.UI.Input.MtKeyModifiers)">
            <summary>
            Converts extended modifiers into Keys modifiers.
            </summary>
            <param name="extModifiers">Extended modifiers to convert.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.SendKey(System.Windows.Forms.Keys)">
            <summary>
            Sends a key down and up events to the active window.
            This was provided so that this class was not dependent on MtSendInput
            class which is part of Mini-Input.
            </summary>
            <param name="key">Key to send; no modifiers.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetKeyboardState">
            <summary>
            Gets the state of all keys on the keyboard
            for your application.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetActiveKeyboardState">
            <summary>
            Gets the state of all keys on the keyboard
            for the active window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetKeyText(System.Windows.Forms.Keys)">
            <summary>
            Gets the specified key pressed and any modifiers pressed down,
            converted to a user-friendly string.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetKeyText(System.Windows.Forms.Keys,MiniTools.UI.Input.MtInputTextTypes,MiniTools.UI.Input.MtKeyTextOptions)">
            <summary>
            Gets the user-friendly string for the specified key.
            The string is formatted as specified in the options.
            </summary>
            <param name="key">Any key</param>
            <param name="options">How to display the key string</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboard.GetModifiersText(System.Windows.Forms.Keys)">
            <summary>
            Gets the specified modifiers pressed down,
            converted to a user-friendly string.
            </summary>
            <param name="key">Any key</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LettersCount">
            <summary>
            Gets the number of letters in the standard ASCII alphabet (A->Z=26).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.DigitsCount">
            <summary>
            Gets the number of digits in the standard ASCII alphabet (0->9=10).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.FunctionKeysCount">
            <summary>
            Gets the number of function keys supported by .NET (F1->F24=24).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.EnabledEvents">
            <summary>
            Gets or sets on a global level whether all of the Mini-Input
            keyboard hooks are enabled, i.e., they raise input events.
            Default is true.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LayoutActive">
            <summary>
            Gets the keyboard layout for the active thread,
            i.e., the thread that currently accepts input.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LayoutCurrent">
            <summary>
            Gets the keyboard layout for the current thread,
            i.e., the thread currently running in this application.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LayoutName">
            <summary>
            Gets the name of the current keyboard layout.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.CapsLock">
            <summary>
            Gets or sets whether the CapsLock key is currently toggled on.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.NumLock">
            <summary>
            Gets or sets whether the NumLock key is currently toggled on.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ScrollLock">
            <summary>
            Gets or sets whether the ScrollLock key is currently toggled on.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.Alt">
            <summary>
            Gets whether the Alt key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LAlt">
            <summary>
            Gets whether the Left Alt key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.RAlt">
            <summary>
            Gets whether the Right Alt key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.AltOnly">
            <summary>
            Gets whether the Alt key is the ONLY modifier key currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ControlAltOnly">
            <summary>
            Gets whether the Control and Alt keys
            are the only modifier keys currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ControlShiftOnly">
            <summary>
            Gets whether the Control and Shift keys 
            are the only modifier keys pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.AltShiftOnly">
            <summary>
            Gets whether the Alt and Shift keys 
            are the only modifier keys currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ControlAltShiftOnly">
            <summary>
            Gets whether the Control, Alt, and Shift keys 
            are the only modifier keys currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.Control">
            <summary>
            Gets whether the Control key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LControl">
            <summary>
            Gets whether the Left Control key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.RControl">
            <summary>
            Gets whether the Right Control key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ControlOnly">
            <summary>
            Gets whether the Control key is the ONLY modifier key currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ModifiersEx">
            <summary>
            Gets the extended modifier keys (distinguished between left and right)
            that are currently pressed down, OR'd together.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.Modifiers">
            <summary>
            Gets the modifier keys (Keys.Control, Keys.Alt, Keys.Shift)
            that are currently pressed down, OR'd together.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.Modified">
            <summary>
            Gets whether there are currently any modifier keys pressed down.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.Plain">
            <summary>
            Gets whether there are currently NO modifier keys pressed down.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.Shift">
            <summary>
            Gets whether the Shift key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LShift">
            <summary>
            Gets whether the Left Shift key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.RShift">
            <summary>
            Gets whether the Right Shift key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ShiftOnly">
            <summary>
            Gets whether the Shift key is the ONLY modifier key currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LWin">
            <summary>
            Gets whether the Left Win key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.RWin">
            <summary>
            Gets whether the Right Win key is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.BrowserKeysBegin">
            <summary>
            Gets the Keys enumeration value where browser keys begin. 
            (Keys.BrowserBack = 166)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.BrowserKeysEnd">
            <summary>
            Gets the Keys enumeration value where browser keys end.
            (Keys.BrowserHome = 172).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.CursorKeysBegin">
            <summary>
            Gets the Keys enumeration value where cursor keys begin.
            (Keys.Left = 37)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.CursorKeysEnd">
            <summary>
            Gets the Keys enumeration value where cursor keys end.
            (Keys.Down = 40)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.DigitKeysBegin">
            <summary>
            Gets the Keys enumeration value where standard alphabet digits begin.
            (Keys.D0 = 48)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.DigitKeysEnd">
            <summary>
            Gets the Keys enumeration value where standard alphabet digits end.
            (Keys.D9 = 57)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.FunctionKeysBegin">
            <summary>
            Gets the Keys enumeration value where the function keys begin. 
            (Keys.F1 = 112)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.FunctionKeysEnd">
            <summary>
            Gets the Keys enumeration value where the function keys end. 
            (Keys.F24 = 135)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LaunchKeysBegin">
            <summary>
            Gets the Keys enumeration value where the launch keys begin. 
            (Keys.LaunchMail = 180)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LaunchKeysEnd">
            <summary>
            Gets the Keys enumeration value where the launch keys end.
            (Keys.LaunchApplication2 = 183)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LetterKeysBegin">
            <summary>
            Gets the Keys enumeration value where standard alphabet letters begin. 
            (Keys.A = 65)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.LetterKeysEnd">
            <summary>
            Gets the Keys enumeration value where standard alphabet letters end.
            (Keys.Z = 90)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.MathKeysBegin">
            <summary>
            Gets the Keys enumeration value where the math keys begin. 
            (Keys.Multiply = 106)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.MathKeysEnd">
            <summary>
            Gets the Keys enumeration value where the math keys end.
            (Keys.Divide = 111)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.MediaKeysBegin">
            <summary>
            Gets the Keys enumeration value where the media keys begin. 
            (Keys.MediaNextTrack = 176)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.MediaKeysEnd">
            <summary>
            Gets the Keys enumeration value where the media keys end.
            (Keys.MediaPlayPause = 179)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ModifierKeysBegin">
            <summary>
            Gets the Keys enumeration value where the modifier keys begin. 
            (Keys.LShiftKey = 160)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.ModifierKeysEnd">
            <summary>
            Gets the Keys enumeration value where the modifier keys end.
            (Keys.RMenu = 165)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.NavigationKeysBegin">
            <summary>
            Gets the Keys enumeration value where the navigation keys begin. 
            (Keys.PageUp = 33)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.NavigationKeysEnd">
            <summary>
            Gets the Keys enumeration value where the navigation keys end.
            (Keys.Home = 36)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.NumPadDigitKeysBegin">
            <summary>
            Gets the Keys enumeration value where standard alphabet letters begin.
            (Keys.NumPad0 = 96)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.NumPadDigitKeysEnd">
            <summary>
            Gets the Keys enumeration value where standard alphabet letters end.
            (Keys.NumPad9 = 105)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.VolumeKeysBegin">
            <summary>
            Gets the Keys enumeration value where the volume keys begin. 
            (Keys.VolumeMute = 173)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.VolumeKeysEnd">
            <summary>
            Gets the Keys enumeration value where the volume keys end.
            (Keys.VolumeUp = 175)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.WindowsKeysBegin">
            <summary>
            Gets the Keys enumeration value where the Windows keys begin. 
            (Keys.LWin = 91)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboard.WindowsKeysEnd">
            <summary>
            Gets the Keys enumeration value where the Windows keys end.
            (Keys.Apps = 93)
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyEventStringHandler">
            <summary>
            Method call when someone is trying to get a key string.
            Return null when you want to use the system default string.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyEventHandler">
            <summary>
            Method called when a key event occurs.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyEventTypes">
            <summary>
            Types of keyboard events.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventTypes.None">
            <summary>
            No key event occurred
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventTypes.Down">
            <summary>
            Key was pressed down
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventTypes.Press">
            <summary>
            Character was composed based on one or more keys pressed down
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventTypes.Up">
            <summary>
            Key was released
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyEventTypes.All">
            <summary>
            All possible keyboard events.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyModifiers">
            <summary>
            Modifier keys that can be held down while pressing other keys.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.None">
            <summary>
            No modifier keys are held down.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.LShift">
            <summary>
            The Left Shift key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.RShift">
            <summary>
            The Right Shift key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.LAlt">
            <summary>
            The Left Alt key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.RAlt">
            <summary>
            The Right Alt key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.LControl">
            <summary>
            The Left Controls key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.RControl">
            <summary>
            The Right Controls key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.LWin">
            <summary>
            The Left Windows key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyModifiers.RWin">
            <summary>
            The Right Windows key.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyScanCodes">
            <summary>
            Scan codes produced when the user presses keys on the keyboard.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Application">
            <summary>
            Application key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Backspace">
            <summary>
            Backspace key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Delete">
            <summary>
            Delete key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Enter">
            <summary>
            Enter key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Escape">
            <summary>
            Escape key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Insert">
            <summary>
            Insert key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPadEnter">
            <summary>
            Numerical keypad Enter key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Pause">
            <summary>
            Pause/Break key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.PrintScreen">
            <summary>
            Print Screen key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Space">
            <summary>
            Space bar
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Tab">
            <summary>
            Tab key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Backslash">
            <summary>
            The Backslash / Pipe key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.CloseBrackets">
            <summary>
            The Close Brackets / Close Brace key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Comma">
            <summary>
            The Comma / Less Than key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Equals">
            <summary>
            The Equals / Plus key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Hyphen">
            <summary>
            The Hyphen / Underscore key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.OpenBrackets">
            <summary>
            The Open Brackets / Open Brace key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Period">
            <summary>
            The Period / Greater Than key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Quotes">
            <summary>
            The Right Single Quote / Double Quotes key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.SemiColon">
            <summary>
            The SemiColon / Colon key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Slash">
            <summary>
            The Forward Slash / Question Mark key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Tilde">
            <summary>
            The Left Single Quote / Tilde key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.PageUp">
            <summary>
            Page Up key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.PageDown">
            <summary>
            Page Down key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Home">
            <summary>
            Home key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.End">
            <summary>
            End key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Left">
            <summary>
            Cursor Left key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Right">
            <summary>
            Cursor Right key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Up">
            <summary>
            Cursor Up key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Down">
            <summary>
            Cursor Down key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D0">
            <summary>
            Digit key 0
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D1">
            <summary>
            Digit key 1
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D2">
            <summary>
            Digit key 2
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D3">
            <summary>
            Digit key 3
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D4">
            <summary>
            Digit key 4
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D5">
            <summary>
            Digit key 5
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D6">
            <summary>
            Digit key 6
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D7">
            <summary>
            Digit key 7
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D8">
            <summary>
            Digit key 8
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D9">
            <summary>
            Digit key 9
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.A">
            <summary>
            Letter key A
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.B">
            <summary>
            Letter key B
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.C">
            <summary>
            Letter key C
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.D">
            <summary>
            Letter key D
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.E">
            <summary>
            Letter key E
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F">
            <summary>
            Letter key F
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.G">
            <summary>
            Letter key G
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.H">
            <summary>
            Letter key H
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.I">
            <summary>
            Letter key I
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.J">
            <summary>
            Letter key J
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.K">
            <summary>
            Letter key K
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.L">
            <summary>
            Letter key L
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.M">
            <summary>
            Letter key M
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.N">
            <summary>
            Letter key N
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.O">
            <summary>
            Letter key O
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.P">
            <summary>
            Letter key P
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Q">
            <summary>
            Letter key Q
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.R">
            <summary>
            Letter key R
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.S">
            <summary>
            Letter key S
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.T">
            <summary>
            Letter key T
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.U">
            <summary>
            Letter key U
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.V">
            <summary>
            Letter key V
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.W">
            <summary>
            Letter key W
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.X">
            <summary>
            Letter key X
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Y">
            <summary>
            Letter key Y
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Z">
            <summary>
            Letter key Z
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad0">
            <summary>
            Numerical keypad 0 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad1">
            <summary>
            Numerical keypad 1 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad2">
            <summary>
            Numerical keypad 2 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad3">
            <summary>
            Numerical keypad 3 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad4">
            <summary>
            Numerical keypad 4 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad5">
            <summary>
            Numerical keypad 5 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad6">
            <summary>
            Numerical keypad 6 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad7">
            <summary>
            Numerical keypad 7 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad8">
            <summary>
            Numerical keypad 8 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumPad9">
            <summary>
            Numerical keypad 9 key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Add">
            <summary>
            Numerical keypad Add key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Divide">
            <summary>
            Numerical keypad Divide key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Multiply">
            <summary>
            Numerical keypad Multiply key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Decimal">
            <summary>
            Numerical keypad Decimal key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.Subtract">
            <summary>
            Numerical keypad Subtract key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F1">
            <summary>
            Function key F1
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F2">
            <summary>
            Function key F2
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F3">
            <summary>
            Function key F3
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F4">
            <summary>
            Function key F4
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F5">
            <summary>
            Function key F5
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F6">
            <summary>
            Function key F6
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F7">
            <summary>
            Function key F7
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F8">
            <summary>
            Function key F8
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F9">
            <summary>
            Function key F9
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F10">
            <summary>
            Function key F10
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F11">
            <summary>
            Function key F11
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.F12">
            <summary>
            Function key F12
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.CapsLock">
            <summary>
            CapsLock key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.NumLock">
            <summary>
            NumLock key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.ScrollLock">
            <summary>
            ScrollLock key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.LControl">
            <summary>
            Left Control key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.RControl">
            <summary>
            Right Control key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.LShift">
            <summary>
            Left Shift key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.RShift">
            <summary>
            Right Shift key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.LAlt">
            <summary>
            Left Alt key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.RAlt">
            <summary>
            Right Alt key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.LWin">
            <summary>
            Left Windows key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.RWin">
            <summary>
            Right Windows key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.BrowserBack">
            <summary>
            The Browser Back key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.BrowserForward">
            <summary>
            The Browser Forward key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.BrowserRefresh">
            <summary>
            The Browser Refresh key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.BrowserStop">
            <summary>
            The Browser Stop key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.BrowserSearch">
            <summary>
            The Browser Search key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.BrowserFavorites">
            <summary>
            The Browser Favorites key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.BrowserHome">
            <summary>
            The Browser Home key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.VolumeMute">
            <summary>
            The Volume Mute key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.VolumeDown">
            <summary>
            The Volume Down key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.VolumeUp">
            <summary>
            The Volume Up key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.MediaNextTrack">
            <summary>
            The Next Track media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.MediaPlayPause">
            <summary>
            The Play/Pause media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.MediaPreviousTrack">
            <summary>
            The Previous Track media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.MediaSelect">
            <summary>
            The Select Media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.MediaStop">
            <summary>
            The Stop media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.LaunchMail">
            <summary>
            Email launch key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.LaunchApplication1">
            <summary>
            First Application launch key
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyScanCodes.LaunchApplication2">
            <summary>
            Second Application launch key
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyVirtualCodes">
            <summary>
            Virtual key codes produced when the user presses keys on the keyboard.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.None">
            <summary>
            No key or an unknown key was pressed (0).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.LButton">
            <summary>
            Left Mouse button
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.RButton">
            <summary>
            Right Mouse button
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.MButton">
            <summary>
            Middle Mouse button
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.XButton1">
            <summary>
            Fourth Mouse button
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.XButton2">
            <summary>
            Fifth Mouse button
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Backspace">
            <summary>
            The Backspace key (8).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Tab">
            <summary>
            The Tab key (9).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Clear">
            <summary>
            The Clear key (12).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Enter">
            <summary>
            The Enter key (13).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.ShiftKey">
            <summary>
            The Shift key (16).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.ControlKey">
            <summary>
            The Control key (17).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.AltKey">
            <summary>
            The Alt key (18).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Pause">
            <summary>
            The Pause key (19).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.CapsLock">
            <summary>
            The Caps Lock key (20).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Escape">
            <summary>
            The Escape key (27).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Space">
            <summary>
            The Space Bar key (32).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.PageUp">
            <summary>
            The PageUp key (33).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.PageDown">
            <summary>
            The PageDown key (34).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.End">
            <summary>
            The End key (35).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Home">
            <summary>
            The Home key (36).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Left">
            <summary>
            The Left cursor key (37).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Up">
            <summary>
            The Up cursor key (38).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Right">
            <summary>
            The Right cursor key (39).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Down">
            <summary>
            The Down cursor key (40).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.PrintScreen">
            <summary>
            The PrintScreen key (44).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Insert">
            <summary>
            The Insert key (45).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Delete">
            <summary>
            The Delete key (46).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D0">
            <summary>
            The 0 digit key (48).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D1">
            <summary>
            The 1 digit key (49).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D2">
            <summary>
            The 2 digit key (50).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D3">
            <summary>
            The 3 digit key (51).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D4">
            <summary>
            The 4 digit key (52).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D5">
            <summary>
            The 5 digit key (53).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D6">
            <summary>
            The 6 digit key (54).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D7">
            <summary>
            The 7 digit key (55).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D8">
            <summary>
            The 8 digit key (56).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D9">
            <summary>
            The 9 digit key (57).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.A">
            <summary>
            The A letter key (65).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.B">
            <summary>
            The B letter key (66).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.C">
            <summary>
            The C letter key (67).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.D">
            <summary>
            The D letter key (68).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.E">
            <summary>
            The E letter key (69).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F">
            <summary>
            The F letter key (70).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.G">
            <summary>
            The G letter key (71).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.H">
            <summary>
            The H letter key (72).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.I">
            <summary>
            The I letter key (73).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.J">
            <summary>
            The J letter key (74).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.K">
            <summary>
            The K letter key (75).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.L">
            <summary>
            The L letter key (76).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.M">
            <summary>
            The M letter key (77).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.N">
            <summary>
            The N letter key (78).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.O">
            <summary>
            The O letter key (79).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.P">
            <summary>
            The P letter key (80).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Q">
            <summary>
            The Q letter key (81).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.R">
            <summary>
            The R letter key (82).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.S">
            <summary>
            The S letter key (83).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.T">
            <summary>
            The T letter key (84).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.U">
            <summary>
            The U letter key (85).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.V">
            <summary>
            The V letter key (86).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.W">
            <summary>
            The W letter key (87).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.X">
            <summary>
            The X letter key (88).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Y">
            <summary>
            The Y letter key (89).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Z">
            <summary>
            The Z letter key (90).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.LWin">
            <summary>
            The Left Windows key (91).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.RWin">
            <summary>
            The Right Windows key (92).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Application">
            <summary>
            The Application key (93).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad0">
            <summary>
            The 0 numerical pad digit key (96).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad1">
            <summary>
            The 1 numerical pad digit key (97).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad2">
            <summary>
            The 2 numerical pad digit key (98).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad3">
            <summary>
            The 3 numerical pad digit key (99).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad4">
            <summary>
            The 4 numerical pad digit key (100).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad5">
            <summary>
            The 5 numerical pad digit key (101).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad6">
            <summary>
            The 6 numerical pad digit key (102).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad7">
            <summary>
            The 7 numerical pad digit key (103).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad8">
            <summary>
            The 8 numerical pad digit key (104).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumPad9">
            <summary>
            The 9 numerical pad digit key (105).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Multiply">
            <summary>
            The Asterisk numerical pad key (106).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Add">
            <summary>
            The Plus Sign numerical pad key (107).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Subtract">
            <summary>
            The Hyphen numerical pad key (109).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Decimal">
            <summary>
            The Period numerical pad key (110).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Divide">
            <summary>
            The Forward Slash numerical pad key (111).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F1">
            <summary>
            The F1 function key (112).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F2">
            <summary>
            The F2 function key (113).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F3">
            <summary>
            The F3 function key (114).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F4">
            <summary>
            The F4 function key (115).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F5">
            <summary>
            The F5 function key (116).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F6">
            <summary>
            The F6 function key (117).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F7">
            <summary>
            The F7 function key (118).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F8">
            <summary>
            The F8 function key (119).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F9">
            <summary>
            The F9 function key (120).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F10">
            <summary>
            The F10 function key (121).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F11">
            <summary>
            The F11 function key (122).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.F12">
            <summary>
            The F12 function key (123).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.NumLock">
            <summary>
            The Num Lock key (144).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.ScrollLock">
            <summary>
            The Scroll Lock key (145).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Shift">
            <summary>
            Left or Right Shift Key (16).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Control">
            <summary>
            Left or Right Control Key (17).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Alt">
            <summary>
            Left or Right Alt Key (18).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.LShift">
            <summary>
            The Left Shift key (160).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.RShift">
            <summary>
            The Right Shift key (161).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.LControl">
            <summary>
            The Left Control key (162).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.RControl">
            <summary>
            The Right Control key (163).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.LAlt">
            <summary>
            The Left Alt key (164).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.RAlt">
            <summary>
            The Right Alt key (165).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.BrowserBack">
            <summary>
            The Browser Back key (166).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.BrowserForward">
            <summary>
            The Browser Forward key (167).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.BrowserRefresh">
            <summary>
            The Browser Refresh key (168).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.BrowserStop">
            <summary>
            The Browser Stop key (169).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.BrowserSearch">
            <summary>
            The Browser Search key (170).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.BrowserFavorites">
            <summary>
            The Browser Favorites key (171).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.BrowserHome">
            <summary>
            The Browser Home key (172).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.VolumeMute">
            <summary>
            The Volume Mute key (173).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.VolumeDown">
            <summary>
            The Volume Down key (174).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.VolumeUp">
            <summary>
            The Volume Up key (175).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.MediaNextTrack">
            <summary>
            The Next Track media key (176).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.MediaPreviousTrack">
            <summary>
            The Previous Track media key (177).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.MediaStop">
            <summary>
            The Stop media key (178).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.MediaPlayPause">
            <summary>
            The Play/Pause media key (179).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.MediaSelect">
            <summary>
            The Play/Pause media key (181).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.LaunchMail">
            <summary>
            The Email launch key (180).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.LaunchApplication1">
            <summary>
            The First Application launch key (182).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.LaunchApplication2">
            <summary>
            The Second Application launch key (183).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.SemiColon">
            <summary>
            The SemiColon / Colon key (186).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Equals">
            <summary>
            The Equals / Plus key (187).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Comma">
            <summary>
            The Comma / Less Than key (188).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Hyphen">
            <summary>
            The Hyphen / Underscore key (189).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Period">
            <summary>
            The Period / Greater Than key (190).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Slash">
            <summary>
            The Forward Slash / Question Mark key (191).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Tilde">
            <summary>
            The Left Single Quote / Tilde key (192).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.OpenBrackets">
            <summary>
            The Open Brackets / Open Brace key (219).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Backslash">
            <summary>
            The Backslash / Pipe key (220).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.CloseBrackets">
            <summary>
            The Close Brackets / Close Brace key (221).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyVirtualCodes.Quotes">
            <summary>
            The Right Single Quote / Double Quotes key (222).
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyTextOptions">
            <summary>
            How to display a key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyTextOptions.ModifiersKey">
            <summary>
            Include the modifier keys pressed down + key pressed in this event.
            For example, Shift+F2.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyTextOptions.Key">
            <summary>
            Include just the key that was pressed in this event.
            For example, F2.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyTextOptions.Modifiers">
            <summary>
            Include just the modifier keys pressed down.
            For example, Shift.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyboardState">
            <summary>
            Represents the state of all keys on the keyboard
            at the instance this object is created.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardState.#ctor">
            <summary>
            Grabs the state of all keys on the keyboard.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardState.IsKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is pressed down
            when this keyboard state was recorded.
            </summary>
            <param name="key">Any key</param>
            <returns></returns>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyboardState.IsKeyUp(System.Windows.Forms.Keys)">
            <summary>
            Gets whether the specified key is not pressed down
            when this keyboard state was recorded.
            </summary>
            <param name="key">Any key</param>
            <returns></returns>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyboardState.State">
            <summary>
            Gets the byte array that represents the keyboard state
            when this object was constructed.
            This is provided for advanced users.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyChars">
            <summary>
            Base class for an object that defines the key characters
            that appear when typing an Alt+KeyCode.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyChars.GetChar(System.Int32,MiniTools.UI.Input.MtKeyCharTypes)">
            <summary>
            Gets the specified character.
            </summary>
            <param name="charIndex">Must be 0-255, else it will be forced to 0.</param>
            <param name="type">Type of character to get.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyChars.GetCharDerived(System.Int32,MiniTools.UI.Input.MtKeyCharTypes)">
            <summary>
            Implements getting the specified character.
            </summary>
            <param name="charIndex">Will be 0-255.</param>
            <param name="type">Type of character to get.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyChars.GetOEMChar(System.Int32)">
            <summary>
            Gets the specified OEM character.
            </summary>
            <param name="charIndex">Must be 0-255, else it will be forced to 0.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyChars.GetWindowsChar(System.Int32)">
            <summary>
            Gets the specified Windows character.
            </summary>
            <param name="charIndex">Must be 0-255, else it will be forced to 0.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyChars.GetCharIndex(System.Int32)">
            <summary>
            Gets the index and character set required to produce the character
            with the specified value.  Returns an index of 0 if there is no mapping.
            </summary>
            <param name="charValue">Any character value.  Less than zero will be forced to zero.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyChars.GetCharIndexDerived(System.Int32)">
            <summary>
            Implements getting the specified character.
            </summary>
            <param name="charValue">Any character value.  Less than zero will be forced to zero.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyChars.NumChars">
            <summary>
            Gets the number of characters that can be converted (256).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyChars.Current">
            <summary>
            Gets or sets the current key character conversion.
            Guaranteed to be non-null.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyCharIndex">
            <summary>
            Contains the character index and type of characters to use.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyCharIndex.CharIndex">
            <summary>
            Gets or sets the character index (0-255).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyCharIndex.Type">
            <summary>
            Gets or sets the character set type.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyCharTypes">
            <summary>
            Types of character sets supported by Windows.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyCharTypes.Windows">
            <summary>
            
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyCharsDefault">
            <summary>
            Base class for an object that defines the key characters
            that appear when typing an Alt+KeyCode.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyMap">
            <summary>
            (Pro) Maps ASCII characters to key presses.
            Inherit from this class to provide your own key map.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyMap.GetKeyPresses(System.Char,System.Collections.ArrayList)">
            <summary>
            Given a character, this methods adds to the specified collection
            the key presses necessary to create that character.
            Will not add any keys if there is no defined mapping.
            Override to replace or supplement this mapping.
            </summary>
            <param name="c">Any character.</param>
            <param name="keyPressColl">Collection of key presses. Cannot be null.</param>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyMap.m_UsingUnknownChar">
            <summary>
            Loop counter that prevents an infinite loop if the UnknownChar
            cannot be mapped.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyMap.GetKeyPresses(System.Char)">
            <summary>
            Given a character, this methods returns an array of key presses
            necessary to create that character.
            Will return null if there is no defined mapping.
            Override to replace or supplement this mapping.
            </summary>
            <param name="c">Any character.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyMap.GetKeyPresses(System.String)">
            <summary>
            Gets an array of key presses required to create the specified string.
            May return null if there is no text.
            Override to provide your own complete mapping.
            </summary>
            <param name="text">Any text, OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyMap.GetKey(System.Char)">
            <summary>
            Uses the operating system VkKeyScanEx function 
            to convert the specified character into a key press,
            using the keyboard layout from the active thread.
            </summary>
            <param name="c">Character to convert.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyMap.InitializeKeyCharMappings">
            <summary>
            Initializes the array that maps ASCII characters to Keys keystrokes.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyMap.m_CharSeqMap">
            <summary>
            Array of character-to-key sequence mappings.
            Indexed into the array by the character.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyMap.GetCharSeqMapping(System.Char)">
            <summary>
            Gets the key sequence required to type the specified character.
            </summary>
            <param name="c">Any character.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyMap.SetCharSeqMapping(System.Char,MiniTools.UI.Input.MtKeySeq)">
            <summary>
            Sets the key sequence required to type the specified character.
            </summary>
            <param name="c">Any character.</param>
            <param name="keySeq">Key sequence required to type the specified character.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyMap.Current">
            <summary>
            Gets or sets the current key map.
            Guaranteed to be non-null.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyMap.UnknownChar">
            <summary>
            Gets or sets the character to substitute
            if a character cannot be mapped into a key.
            If null, no character will be substituted.
            Default is the question mark.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyPress">
            <summary>
            (Pro) Stores a key press up/down/both.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyPress.#ctor(System.Windows.Forms.Keys)">
            <summary>
            Creates a key press down and up.
            </summary>
            <param name="k">Any key, including modifiers if desired.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeyPress.#ctor(System.Windows.Forms.Keys,MiniTools.UI.Input.MtKeyPressTypes)">
            <summary>
            Creates a key press of the specified type.
            </summary>
            <param name="k">Any key, including modifiers if desired.</param>
            <param name="keyType">What type of key press this is.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyPress.Key">
            <summary>
            Gets or sets the key to be pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeyPress.Type">
            <summary>
            Gets or sets what type of key press this is.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeyPressTypes">
            <summary>
            What type of key press this is.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyPressTypes.Press">
            <summary>
            Key is pressed and released.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyPressTypes.Down">
            <summary>
            Key is pressed down.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtKeyPressTypes.Up">
            <summary>
            Key is released up.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtKeySeq">
            <summary>
            (Pro) Sequence of key presses.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeySeq.#ctor(System.Windows.Forms.Keys)">
            <summary>
            Creates a key sequence that contains a single key press
            plus any modifiers.
            </summary>
            <param name="k">Any key including modifiers.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeySeq.#ctor(MiniTools.UI.Input.MtKeyPress)">
            <summary>
            Creates a key sequence that contains a single key press
            plus any modifiers.
            </summary>
            <param name="keyPress">Single key press that will make up this sequence.  OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtKeySeq.#ctor(MiniTools.UI.Input.MtKeyPress[])">
            <summary>
            Creates a key sequence that contains the specified key presses.
            </summary>
            <param name="keyPresses">Array of key presses that will make up this sequence.  OK if null or empty.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeySeq.Key">
            <summary>
            Sets this sequence to contain only the specified key,
            pressed down and released,
            removing any existing keys in the sequence.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeySeq.Press">
            <summary>
            Gets the first or only key press in this sequence, 
            or null if this sequence is empty.
            Sets this sequence to contain only the specified key press,
            removing any existing keys in the sequence.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtKeySeq.Presses">
            <summary>
            Gets or sets the sequence of key presses.
            This exposes the internal array of key presses.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMacro">
            <summary>
            (Pro) Collection of commands that execute in sequence on a specified window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.#ctor">
            <summary>
            Constructs an empty macro.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.#ctor(System.String)">
            <summary>
            Constructs a macro with the specified macro text.
            </summary>
            <param name="macroText">Macro text. May be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.ExecuteAsync">
            <summary>
            Executes this macro on the active window in a separate thread, 
            so that the calling thread can continue immediately.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.Execute(System.Boolean)">
            <summary>
            Executes this macro on the active window.
            </summary>
            <param name="async">Whether to execute this macro in a separate thread.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.Execute">
            <summary>
            Executes this macro on the active window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.ExecuteAsync(System.IntPtr)">
            <summary>
            Executes this macro on the specified window in a separate thread, 
            so that the calling thread can continue immediately.
            The window is activated before execution.
            </summary>
            <param name="hWnd">Target window handle; ignored if window cannot be found</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.Execute(System.IntPtr,System.Boolean)">
            <summary>
            Executes this macro on the specified window.
            The window is activated before execution.
            </summary>
            <param name="hWnd">Target window handle; ignored if window cannot be found</param>
            <param name="async">Whether to execute this macro in a separate thread.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.Execute(System.IntPtr)">
            <summary>
            Executes this macro on the specified window
            The window is activated before execution.
            </summary>
            <param name="hWnd">Target window handle; ignored if window cannot be found</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.SystemExecute(MiniTools.UI.Input.MtMacro,System.IntPtr,MiniTools.UI.Input.MtInputCmdColl)">
            <summary>
            Performs the actual execution of this macro,
            executing each command in order.
            </summary>
            <param name="macro">Macro to execute. Cannot be null.</param>
            <param name="hWnd">Window to target. If IntPtr.Zero, will target the currently active window.</param>
            <param name="cmdColl">Collection of commands to execute.  Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.ExecuteAsync(MiniTools.UI.Input.MtWindow)">
            <summary>
            Executes this macro on the specified window in a separate thread, 
            so that the calling thread can continue immediately.
            The window is activated before execution.
            </summary>
            <param name="window">Target window; ignored if null</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.Execute(MiniTools.UI.Input.MtWindow,System.Boolean)">
            <summary>
            Executes this macro on the specified window.
            </summary>
            <param name="window">Target window; ignored if null</param>
            <param name="async">Whether to execute this macro in a separate thread.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.Execute(MiniTools.UI.Input.MtWindow)">
            <summary>
            Executes this macro on the specified window
            The window is activated before execution.
            </summary>
            <param name="window">Target window; ignored if null</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.ParseCommandsToText">
            <summary>
            Parses the collection of input Commands into Text.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.ParseTextToCommands">
            <summary>
            Parses the Text into the collection of input Commands.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.Pause(System.Int32)">
            <summary>
            Pauses execution for the specified amount of time,
            checking to see if execution has been cancelled.
            </summary>
            <param name="pauseMilliseconds">Number of milliseconds to pause.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.Cancelled">
            <summary>
            Gets or sets whether the execution of this macro has been cancelled.
            Set to true when you want to cancel this macro.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.CapsLockOff">
            <summary>
            Gets or sets whether CapsLock will be shut off before this macro executes,
            then reset to its original state when the macro finishes execution.
            Default is false.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.CapsLockOffDefault">
            <summary>
            Gets or sets whether by default
            CapsLock will be shut off before this macro executes,
            then reset to its original state when the macro finishes execution.
            Note that you can also this for each individual macro
            with the CapsLockOff property.
            Default is false.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.Commands">
            <summary>
            Gets the collection of commands in this macro.
            Guaranteed to be non-null.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.PauseMS">
            <summary>
            Gets or sets the pause (in milliseconds) between each command
            in an input macro.  This global value affects the speed of all
            running input macros.  Set to 0 for full speed.
            Set to 50 or more to slow down the execution.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.WindowPauseMS">
            <summary>
            Gets or sets the pause (in milliseconds) after activating a new window
            before any additional commands run in the macro.
            This allow the window to come active so that subsequent commands
            are executed properly.  You can also insert pause commands in the macro.
            This global value affects the window pause for all macros.  
            Default is 200 milliseconds.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.SafeMode">
            <summary>
            Gets or sets whether this macro is operating in safe mode.
            In that case, pauses cannot last more than 10 seconds,
            and the keyboard modifiers are cleared after execution.
            Default is true.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.SafeModeDefault">
            <summary>
            Gets or sets whether macros should by default operate in safe mode.
            Note that you can also this for each individual macro
            with the SafeMode property.
            Default is true.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacro.Text">
            <summary>
            Gets or sets the macro text that is executed.
            Will parse the command collection, if needed.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMacro.ThreadArgs">
            <summary>
            Object that contains information needed to execute this macro
            in a separate thread.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacro.ThreadArgs.Execute">
            <summary>
            Execute the macro with these arguments.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMacroParser">
            <summary>
            (Pro) Parses macro text into a collection of commands.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacroParser.ParseMacroText(System.String)">
            <summary>
            Parses the specified macro text into an array of macro tokens.
            By default, commands in the macro text are of the form:
            {Prefix1+Prefix2+Prefix3+Command:Argument1,Argument2,Argument3}
            </summary>
            <param name="macroText">Command text to be parsed.  Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacroParser.Parse(System.String,MiniTools.UI.Input.MtInputCmdColl)">
            <summary>
            Parses the specified macro text into the specified collection of input commands.
            Any existing commands will be cleared.
            By default, commands in the macro text are of the form:
            {Prefix1+Prefix2+Prefix3+Command:Argument1,Argument2,Argument3}
            </summary>
            <param name="macroText">Command text to be parsed.  Ignored if null.</param>
            <param name="commands">Collection of commands to populate with the parsed macro tokens.  Ignored if null.  Any existing commands will be cleared.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacroParser.ParseTokens(MiniTools.UI.Input.MtMacroToken[],MiniTools.UI.Input.MtInputCmdColl)">
            <summary>
            Parses the array of macro tokens into the specified collection of input commands.
            </summary>
            <param name="macroTokens">Macro text parsed into an array of macro tokens. Ignored if null.</param>
            <param name="commands">Collection of commands to populate with the parsed macro tokens.  Ignored if null.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroParser.Current">
            <summary>
            Gets or sets the current macro parser.
            Set this property to your own custom parser.
            Guaranteed to be non-null.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMacroParser.ParseOps">
            <summary>
            Operations to perform as a macro is parsed.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMacroParser.ParseStates">
            <summary>
            States that can occur while parsing macro text.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroParser.ParseStates.Command">
            <summary>
            Parsing the macro text.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroParser.ParseStates.Argument">
            <summary>
            Parsing a command argument.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroParser.ParseStates.ArgumentText">
            <summary>
            Parsing a command argument text block.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroParser.ParseStates.ArgumentTextAfter">
            <summary>
            Parsing a command argument after a text text block.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroParser.ParseStates.Text">
            <summary>
            Parsing a text block.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroParser.ParseStates.Unknown">
            <summary>
            Parsing unknown text.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroParser.ParseStates.Whitespace">
            <summary>
            Parsing whitespace.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMacroToken">
            <summary>
            (Pro) Macro text that has been parsed into its composite strings
            but whose ultimate command has not yet been determined.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMacroToken.#ctor">
            <summary>
            Constructs a default (blank) parsed command.
            Use the properties to set the command elements.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.Argument1">
            <summary>
            Gets or sets the first command argument or null if no argument.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.Argument2">
            <summary>
            Gets or sets the second command argument or null if no argument.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.Argument3">
            <summary>
            Gets or sets the third command argument or null if no argument.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.Command">
            <summary>
            Gets or sets the text that describes the command.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.Prefix1">
            <summary>
            Gets or sets the first command prefix or null if no prefix.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.Prefix2">
            <summary>
            Gets or sets the second command prefix or null if no prefix.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.Prefix3">
            <summary>
            Gets or sets the third command prefix or null if no prefix.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.OriginalText">
            <summary>
            Gets or sets the original text for this command.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.IsCommand">
            <summary>
            Gets whether this is a command to be parsed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.IsText">
            <summary>
            Gets or sets whether this represents a text command.
            Default is false.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.IsUnknown">
            <summary>
            Gets or sets whether this is an unknown (badly formed) command.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.IsWhitespace">
            <summary>
            Gets or sets whether this represents a whitespace command.
            Default is false.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMacroToken.CommandType">
            <summary>
            Gets or sets the type of this parsed command.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMacroTokenTypes">
            <summary>
            Types of macro tokens.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroTokenTypes.Command">
            <summary>
            Command needs to be parsed to determine its type.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroTokenTypes.Text">
            <summary>
            This is a text command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroTokenTypes.Unknown">
            <summary>
            This is an unknown command (i.e., badly formed macro text).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMacroTokenTypes.Whitespace">
            <summary>
            This is a whitespace command, i.e., whitespace in the macro text.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouse">
            <summary>
            General mouse utilities and properties.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.GetButtonsAfter(System.Windows.Forms.MouseButtons,System.Windows.Forms.MouseButtons,System.Boolean)">
            <summary>
            Gets the modifiers for the state of the keyboard AFTER
            the specified key is pressed, either down or up.
            </summary>
            <param name="buttonPressed">Button that was involved in this event</param>
            <param name="buttonsDown">Mouse buttons that are currently down</param>
            <param name="up">True if the button was released</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.IsLeft(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets whether the left mouse button is currently pressed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.IsMiddle(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets whether the middle mouse button is currently pressed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.IsNoButtons(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets whether no mouse buttons are currently pressed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.IsRight(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets whether the right mouse button is currently pressed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.IsXButton1(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets whether the first XButton button is currently pressed.
            This is essentially the fourth mouse button.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.IsXButton2(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets whether the second XButton button is currently pressed.
            This is essentially the fifth mouse button.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.GetMouseText(System.Windows.Forms.MouseButtons)">
            <summary>
            Gets the specified mouse button pressed,
            converted to a user-friendly string.
            </summary>
            <param name="mouseButton">Mouse button that was clicked</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.GetMouseText(System.Windows.Forms.MouseButtons,System.Windows.Forms.Keys)">
            <summary>
            Gets any modifiers key pressed down plus the specified mouse button pressed,
            converted to a user-friendly string.
            </summary>
            <param name="mouseButton">Mouse button that was clicked</param>
            <param name="modifierKeys">Any modifier keys pressed down when the mouse was clicked</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtMouse.GetMouseText(System.Windows.Forms.MouseButtons,System.Windows.Forms.Keys,MiniTools.UI.Input.MtInputTextTypes,MiniTools.UI.Input.MtMouseTextOptions)">
            <summary>
            Gets the user-friendly string for the specified mouse.
            The string is formatted as specified in the options.
            </summary>
            <param name="mouseButton">Mouse button that was clicked</param>
            <param name="modifierKeys">Any modifier keys pressed down when the mouse was clicked</param>
            <param name="options">How to display the mouse text</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.Buttons">
            <summary>
            Gets which mouse buttons are currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.Left">
            <summary>
            Gets whether the left mouse button is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.Middle">
            <summary>
            Gets whether the middle mouse button is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.NoButtons">
            <summary>
            Gets whether no mouse buttons are currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.NumButtons">
            <summary>
            Gets the number of mouse buttons on the installed mouse.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.Right">
            <summary>
            Gets whether the right mouse button is currently pressed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.ButtonsSwapped">
            <summary>
            Gets whether the left and right mouse buttons have been swapped.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.XButton1">
            <summary>
            Gets whether the first XButton button is currently pressed.
            This is essentially the fourth mouse button.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.XButton2">
            <summary>
            Gets whether the second XButton button is currently pressed.
            This is essentially the fifth mouse button.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.DoubleClickSize">
            <summary>
            Gets the size (in pixels) of the area in which the user must
            click the mouse to consider it a double click.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.DoubleClickTimeMS">
            <summary>
            Gets the maximum number of milliseconds between mouse clicks
            (of the same mouse button within a DoubleClickSize region)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.EnabledEvents">
            <summary>
            Gets or sets on a global level whether all of the Mini-Input
            mouse hooks are enabled, i.e., they raise input events.
            Default is true.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.IsMousePresent">
            <summary>
            Gets whether a mouse is installed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.IsWheelPresent">
            <summary>
            Gets whether a mouse wheel is installed.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.IsWheelSupported">
            <summary>
            Gets whether a mouse wheel is supported by the current operating system.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.Position">
            <summary>
            Gets or sets the current cursor position.
            In pixels, relative to the upper left corner of the screen, 
            which is (0,0).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtMouse.WheelScrollLines">
            <summary>
            Gets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseEventHandler">
            <summary>
            Method called when a mouse event occurs.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseEventTypes">
            <summary>
            Types of mouse events.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseEventTypes.None">
            <summary>
            No mouse event occurred
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseEventTypes.Down">
            <summary>
            Mouse button was pressed down
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseEventTypes.Move">
            <summary>
            Mouse has moved while no mouse buttons are pressed down
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseEventTypes.Up">
            <summary>
            Mouse button was released
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseEventTypes.Click">
            <summary>
            Mouse button was clicked once
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseEventTypes.DoubleClick">
            <summary>
            Mouse button was clicked twice
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseEventTypes.Wheel">
            <summary>
            Mouse wheel has rotated.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseEventTypes.All">
            <summary>
            All possible mouse events
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtMouseTextOptions">
            <summary>
            How to display the mouse string,
            which is a user-friendly string representing a mouse.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseTextOptions.ModifiersButton">
            <summary>
            Include the modifier keys pressed down + mouse button pressed in this event
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseTextOptions.Button">
            <summary>
            Include just the mouse button that was pressed in this event
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtMouseTextOptions.Modifiers">
            <summary>
            Include just the modifier keys pressed down when this event occurred
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtSendInput">
            <summary>
            (Pro) Sends input to a window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Char(System.Char)">
            <summary>
            Sends the specified character to the active window.
            </summary>
            <param name="c">Any character.  Not sent if null char.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.AltKeyCode(System.Int32,MiniTools.UI.Input.MtKeyCharTypes)">
            <summary>
            Sends the specified Alt+NumPad sequence to the active window,
            which generates a character from the Windows or OEM character sets.
            </summary>
            <param name="keyVal">Numeric keycode value to send.</param>
            <param name="type">What type of character set to use.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.KeyCode(System.Windows.Forms.Keys)">
            <summary>
            Sends the specified key code (but no modifiers) to the active window
            as both a key down and up event.
            </summary>
            <param name="k">Key code.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.KeyCode(System.Windows.Forms.Keys,MiniTools.UI.Input.MtKeyPressTypes)">
            <summary>
            Sends the specified key code (but no modifiers) to the active window.
            </summary>
            <param name="k">Key code.</param>
            <param name="type">Whether to press the key down, up or both.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.KeyModifiers(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Sends the Left modifier keys (if any) to the active window.
            </summary>
            <param name="k">Modifier keys OR'd together.  Ignored if no modifiers specified.</param>
            <param name="up">False if key should be pressed down.  True if key should be released up.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Key(System.Windows.Forms.Keys[])">
            <summary>
            Sends the specified keys (and any OR'd modifiers) to the active window
            as one continuous, uninterruptible input stream of keys.
            </summary>
            <param name="keys">Array of key presses.  OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Key(MiniTools.UI.Input.MtKeyPress[])">
            <summary>
            Sends the specified array of key presses to the active window.
            </summary>
            <param name="keyPresses">Array of key presses.  OK if null or empty.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Key(MiniTools.UI.Input.MtKeySeq)">
            <summary>
            Sends the specified key sequence to the active window.
            </summary>
            <param name="keySeq">Sequence of keys to send. OK if empty.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Key(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            Sends the specified key (and any modifiers) to the active window
            the specified number of times in succession
            as one continuous, uninterruptible input stream of keys.
            </summary>
            <param name="k">Any key to send to the active window, including modifiers.</param>
            <param name="numPresses">Number of key presses in succession.  Ignored if zero or less.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Key(System.Windows.Forms.Keys,MiniTools.UI.Input.MtKeyCmdTypes)">
            <summary>
            Sends the specified key (and any modifiers) to the active window
            with the specified event (down, up or press).
            </summary>
            <param name="k">Any key to send to the active window, including modifiers.</param>
            <param name="keyCmdType">Type of key command to send.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Key(System.Windows.Forms.Keys)">
            <summary>
            Sends the specified key (and any modifiers) to the active window.
            </summary>
            <param name="k">Any key to send to the active window, including modifiers.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Key(MiniTools.UI.Input.MtKeyPress)">
            <summary>
            Sends the specified key (and any modifiers) to the active window.
            </summary>
            <param name="keyPress">Key press to send to the active window.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseClick(System.Windows.Forms.MouseButtons)">
            <summary>
            Sends a single mouse click (down and up) to the active window.
            </summary>
            <param name="button">Any single mouse button.  Ignored if multiple buttons OR'd together.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseClick(System.Windows.Forms.MouseButtons,System.Windows.Forms.Control)">
            <summary>
            Sends a single mouse click (down and up) to the center of the 
            specified control.
            </summary>
            <param name="button">Any single mouse button.  Ignored if multiple buttons OR'd together.</param>
            <param name="control">Control to click. Ignored if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseDoubleClick(System.Windows.Forms.MouseButtons)">
            <summary>
            Sends a mouse double click (down and up twice) to the active window.
            </summary>
            <param name="button">Any single mouse button.  Ignored if multiple buttons OR'd together.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseClick(System.Windows.Forms.MouseButtons,System.Int32)">
            <summary>
            Sends the specified number of successive mouse clicks (down and up)
            to the active window.
            </summary>
            <param name="button">Any single mouse button.  Ignored if multiple buttons OR'd together.</param>
            <param name="numClicks">Number of successive mouse clicks.  Ignored if zero or less.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseClick(System.Windows.Forms.MouseButtons,System.Boolean)">
            <summary>
            Clicks the mouse down or releases it up.
            </summary>
            <param name="button">Any single mouse button.  Ignored if multiple buttons OR'd together.</param>
            <param name="down">True if clicked down; false if released up.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseMoveRelative(System.Int32,System.Int32)">
            <summary>
            Moves the mouse the specified number of pixels relative to its current position.
            </summary>
            <param name="deltaX">Number of pixels horizontally from the current mouse position; positive is to the right, negative is to the left</param>
            <param name="deltaY">Number of pixels vertically from the current mouse position; positive is down, negative is up</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseMoveWindow(System.Int32,System.Int32)">
            <summary>
            Moves the mouse to the specified position.
            This is in client coordinates relative to the upper left corner
            of the active window.
            </summary>
            <param name="x">Number of pixels horizontally from the upper left corner of the active window</param>
            <param name="y">Number of pixels vertically from the upper left corner of the active window</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseMoveWindow(System.Drawing.Point)">
            <summary>
            Moves the mouse to the specified position.
            This is in client coordinates relative to the upper left corner
            of the active window.
            </summary>
            <param name="point">Position relative to the upper left corner of the active window</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseMoveScreen(System.Int32,System.Int32)">
            <summary>
            Moves the mouse to the specified position,
            relative to the upper left corner of the screen.
            </summary>
            <param name="screenX">Number of pixels horizontally from the upper left corner of the screen</param>
            <param name="screenY">Number of pixels vertically from the upper left corner of the screen</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseMoveScreen(System.Drawing.Point)">
            <summary>
            Moves the mouse to the specified position,
            relative to the upper left corner of the screen.
            </summary>
            <param name="point">Number of pixels relative to the upper left corner of the screen</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseWheel(System.Boolean)">
            <summary>
            Scrolls the mouse wheel once.
            </summary>
            <param name="wheelUp">Whether the mouse wheel was scrolled up (true) or down (false)</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.MouseWheel(System.Boolean,System.Int32)">
            <summary>
            Scrolls the mouse wheel the specified number of times.
            </summary>
            <param name="wheelUp">Whether the mouse wheel was scrolled up (true) or down (false)</param>
            <param name="clicks">Number of mouse wheel clicks</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.Text(System.String)">
            <summary>
            Sends the specified text string to the active window.
            </summary>
            <param name="sendText">Any text; OK if null or blank</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtSendInput.VKtoScanCode(MiniTools.UI.Input.MtKeyVirtualCodes)">
            <summary>
            Converts the specified virtual key into a scan code.
            </summary>
            <param name="vk">Any virtual key value.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtSendInput.ActiveWindowHandle">
            <summary>
            Gets or sets the target window handle for sending input.
            The current active window is returned.
            By setting the window, this brings the specified window 
            to the foreground and activates it.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtSendInput.ActiveWindow">
            <summary>
            Gets or sets the target window for sending input.
            The current active window is returned.
            By setting the window, this brings the specified window 
            to the foreground and activates it.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtHotkeyBox">
            <summary>
            Control that displays the hotkey combinations pressed by the user.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtHotkeyBox.m_KeyboardHook">
            <summary>
            Use a keyboard control hook to intercept input for this textbox.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtHotkeyBox.RefreshText">
            <summary>
            Refreshes the text shown based on the current key.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHotkeyBox.Hotkey">
            <summary>
            Gets or sets the current hotkey entered into this control.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtHotkeyBox.TextType">
            <summary>
            Gets or sets the type of text to display for the hotkeys entered.
            Default is MtInputTextTypes.Plain.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtHotkeyBox.KeyStates">
            <summary>
            Indicates what key was pressed last.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtAscii">
            <summary>
            Information about the ASCII character set.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtAscii.DigitsBegin">
            <summary>
            Gets the ASCII value where standard digits begin.
            (zero = 48)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtAscii.DigitsEnd">
            <summary>
            Gets the ASCII value where standard digits end.
            (nine = 57)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtAscii.LettersLowerBegin">
            <summary>
            Gets the ASCII value where standard lower case letters begin. 
            (a = 97)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtAscii.LettersLowerEnd">
            <summary>
            Gets the ASCII value where standard lower case letters end.
            (z = 122)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtAscii.LettersUpperBegin">
            <summary>
            Gets the ASCII value where standard upper case letters begin. 
            (A = 65)
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtAscii.LettersUpperEnd">
            <summary>
            Gets the ASCII value where standard upper case letters end.
            (Z = 90)
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputBeep">
            <summary>
            Beeps the computer.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputBeep.Beep">
            <summary>
            Beeps the keyboard
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputBeep.Beep(MiniTools.UI.Input.MtInputBeepTypes)">
            <summary>
            Beeps the keyboard with the specified type of beep.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputBeepTypes">
            <summary>
            Types of beep sounds.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputSound">
            <summary>
            Wrapper class for playing sounds.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputSound.PlaySound(System.String)">
            <summary>
            Plays the sound in the specified file
            synchronously and ignores errors. 
            </summary>
            <param name="sound_file">Full path of the sound file to play.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputSound.PlaySound(System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays the sound in the specified file. 
            </summary>
            <param name="sound_file">Full path of the sound file to play.</param>
            <param name="is_synchronous">Whether to play the sound synchronously (wait for sound to finish before returning to your code) or asynchronously (return immediately).</param>
            <param name="ignore_errors">Suppresses exceptions if the sound is not found or valid.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputSound.PlaySound(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Plays the sound in the specified file.
            </summary>
            <param name="sound_file">Full path of the sound file to play.</param>
            <param name="is_synchronous">Whether to play the sound synchronously (wait for sound to finish before returning to your code) or asynchronously (return immediately).</param>
            <param name="ignore_errors">Suppresses exceptions if the sound is not found or valid.</param>
            <param name="no_default">If true and the sound isn't found, a substitute default sound will not be played.</param>
            <param name="loop_sound">Whether to loop the sound (play it over and over).</param>
            <param name="no_stop">If true, plays the sound after all other sounds have played.  This ensures your sound doesn't cut off another sound.</param>
            <returns></returns>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputSound.StopPlay">
            <summary>
            Stops any sound from playing.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputText">
            <summary>
            Manages the text strings that describe keyboard and mouse input.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.#ctor">
            <summary>
            Constructs the default input text.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputText.m_DefaultCommands">
            <summary>
            The text that represents the specified input in commands.
            This is the text used in the macro command language.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputText.m_DefaultDataNames">
            <summary>
            The names used to store the associated input.
            THESE NAMES SHOULD NEVER CHANGE
            and hence can be used for long-term persistence.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputText.m_DefaultText">
            <summary>
            The normal friendly name that users see for the specified input.
            These names can vary by language and changed whenever needed.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.GetText(MiniTools.UI.Input.MtInputTextEntries,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets the specified text entry.
            Override to provide your own text.
            </summary>
            <param name="entry">Desired text entry</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.GetText(System.Windows.Forms.Keys,MiniTools.UI.Input.MtInputTextTypes,MiniTools.UI.Input.MtKeyTextOptions)">
            <summary>
            Gets text for the specified key.
            Override to provide your own text.
            </summary>
            <param name="key">Any key</param>
            <param name="options">How to display the key text</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.GetText(MiniTools.UI.Input.MtKeyEventArgs,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified key event,
            including any modifier keys pressed down.
            </summary>
            <param name="e">Key event that occurred; cannot be null</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.GetText(MiniTools.UI.Input.MtKeyEventArgs,MiniTools.UI.Input.MtKeyTextOptions,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified key event.
            Override to provide your own text.
            </summary>
            <param name="e">Key event that occurred; cannot be null</param>
            <param name="options">How to display the key text</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.GetText(System.Windows.Forms.MouseButtons,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified mouse button.
            Override to provide your own text.
            </summary>
            <param name="mouseButton">Mouse button that was clicked</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.GetText(System.Windows.Forms.MouseButtons,System.Windows.Forms.Keys,MiniTools.UI.Input.MtInputTextTypes,MiniTools.UI.Input.MtMouseTextOptions)">
            <summary>
            Gets text for the specified mouse button.
            Override to provide your own text.
            </summary>
            <param name="mouseButton">Mouse button that was clicked</param>
            <param name="modifierKeys">Any modifier keys pressed down when the mouse was clicked</param>
            <param name="options">How to display the mouse text</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.GetText(MiniTools.UI.Input.MtMouseEventArgs,MiniTools.UI.Input.MtInputTextTypes)">
            <summary>
            Gets text for the specified mouse event,
            including any modifier keys pressed down.
            </summary>
            <param name="e">Mouse event that occurred; cannot be null</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.GetText(MiniTools.UI.Input.MtMouseEventArgs,MiniTools.UI.Input.MtInputTextTypes,MiniTools.UI.Input.MtMouseTextOptions)">
            <summary>
            Gets text for the specified mouse event.
            Override to provide your own text.
            </summary>
            <param name="e">Mouse event that occurred; cannot be null</param>
            <param name="options">How to display the mouse text</param>
            <param name="textType">What type of text to return</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputText.SetText(MiniTools.UI.Input.MtInputTextEntries,MiniTools.UI.Input.MtInputTextTypes,System.String)">
            <summary>
            Sets the text that is used to represent input events.
            Note that command text entries are case-insensitive and must be unique.
            </summary>
            <param name="entry">Entry whose text to change.</param>
            <param name="textType">What type of text to change.</param>
            <param name="text">New text value.</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandArgumentTextBegin">
            <summary>
            Gets or sets the text that indicates the beginning of a command text argument.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandArgumentTextEnd">
            <summary>
            Gets or sets the text that indicates the end of a command text argument.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandBegin">
            <summary>
            Gets or sets the text that indicates the beginning of a command.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandEnd">
            <summary>
            Gets or sets the text that indicates the end of a command.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandArgumentBegin">
            <summary>
            Gets or sets the text that indicates the beginning of a command argument.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandArgumentSeparator">
            <summary>
            Gets or sets the text that separates command arguments.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandNewline">
            <summary>
            Gets or sets the text used for a newline in a macro.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandPrefixSeparator">
            <summary>
            Gets or sets the text that separates command prefixes.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandSeparator">
            <summary>
            Gets or sets the text that separates the commands.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandSuffixSeparator">
            <summary>
            Gets or sets the text that separates the suffix from the command.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandTextBegin">
            <summary>
            Gets or sets the text that indicates the beginning of command text.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.CommandTextEnd">
            <summary>
            Gets or sets the text that indicates the end of command text.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.Current">
            <summary>
            Gets or sets the current input text.
            Guaranteed to be non-null.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.Language">
            <summary>
            Gets or sets the language used for this text collection.
            This property is for informational purposes only.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputText.Name">
            <summary>
            Gets or sets the name of this text collection.
            This property is for informational purposes only.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputTextEntries">
            <summary>
            An array of strings is maintained for both data names
            and text that describes the different input events and commands.
            The array exists so you can customize the text to other languages 
            and for other needs.
            This enumeration is an index into both arrays of strings.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Empty">
            <summary>
            Null string.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.None">
            <summary>
            No key or an unknown key was pressed (0).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Backspace">
            <summary>
            The Backspace key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Clear">
            <summary>
            The Clear key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Enter">
            <summary>
            The Enter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.ShiftKey">
            <summary>
            The Shift key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.ControlKey">
            <summary>
            The Control key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.AltKey">
            <summary>
            The Alt key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Pause">
            <summary>
            The Pause key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CapsLock">
            <summary>
            The Caps Lock key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Escape">
            <summary>
            The Escape key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Space">
            <summary>
            The Space Bar key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.PageUp">
            <summary>
            The PageUp key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.PageDown">
            <summary>
            The PageDown key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Left">
            <summary>
            The Left cursor key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Up">
            <summary>
            The Up cursor key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Right">
            <summary>
            The Right cursor key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Down">
            <summary>
            The Down cursor key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.PrintScreen">
            <summary>
            The PrintScreen key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D0">
            <summary>
            The 0 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D1">
            <summary>
            The 1 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D2">
            <summary>
            The 2 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D3">
            <summary>
            The 3 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D4">
            <summary>
            The 4 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D5">
            <summary>
            The 5 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D6">
            <summary>
            The 6 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D7">
            <summary>
            The 7 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D8">
            <summary>
            The 8 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D9">
            <summary>
            The 9 digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.A">
            <summary>
            The A letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.B">
            <summary>
            The B letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.C">
            <summary>
            The C letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.D">
            <summary>
            The D letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.E">
            <summary>
            The E letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F">
            <summary>
            The F letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.G">
            <summary>
            The G letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.H">
            <summary>
            The H letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.I">
            <summary>
            The I letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.J">
            <summary>
            The J letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.K">
            <summary>
            The K letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.L">
            <summary>
            The L letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.M">
            <summary>
            The M letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.N">
            <summary>
            The N letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.O">
            <summary>
            The O letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.P">
            <summary>
            The P letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Q">
            <summary>
            The Q letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.R">
            <summary>
            The R letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.S">
            <summary>
            The S letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.T">
            <summary>
            The T letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.U">
            <summary>
            The U letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.V">
            <summary>
            The V letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.W">
            <summary>
            The W letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.X">
            <summary>
            The X letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Y">
            <summary>
            The Y letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Z">
            <summary>
            The Z letter key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerA">
            <summary>
            The A lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerB">
            <summary>
            The B lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerC">
            <summary>
            The C lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerD">
            <summary>
            The D lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerE">
            <summary>
            The E lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerF">
            <summary>
            The F lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerG">
            <summary>
            The G lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerH">
            <summary>
            The H lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerI">
            <summary>
            The I lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerJ">
            <summary>
            The J lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerK">
            <summary>
            The K lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerL">
            <summary>
            The L lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerM">
            <summary>
            The M lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerN">
            <summary>
            The N lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerO">
            <summary>
            The O lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerP">
            <summary>
            The P lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerQ">
            <summary>
            The Q lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerR">
            <summary>
            The R lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerS">
            <summary>
            The S lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerT">
            <summary>
            The T lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerU">
            <summary>
            The U lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerV">
            <summary>
            The V lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerW">
            <summary>
            The W lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerX">
            <summary>
            The X lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerY">
            <summary>
            The Y lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LowerZ">
            <summary>
            The Z lowercase letter.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LWin">
            <summary>
            The Left Windows key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.RWin">
            <summary>
            The Right Windows key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Application">
            <summary>
            The Application key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad0">
            <summary>
            The 0 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad1">
            <summary>
            The 1 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad2">
            <summary>
            The 2 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad3">
            <summary>
            The 3 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad4">
            <summary>
            The 4 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad5">
            <summary>
            The 5 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad6">
            <summary>
            The 6 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad7">
            <summary>
            The 7 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad8">
            <summary>
            The 8 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumPad9">
            <summary>
            The 9 numerical pad digit key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Multiply">
            <summary>
            The Asterisk numerical pad key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Add">
            <summary>
            The Plus Sign numerical pad key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Subtract">
            <summary>
            The Hyphen numerical pad key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Decimal">
            <summary>
            The Period numerical pad key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Divide">
            <summary>
            The Forward Slash numerical pad key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F1">
            <summary>
            The F1 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F2">
            <summary>
            The F2 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F3">
            <summary>
            The F3 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F4">
            <summary>
            The F4 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F5">
            <summary>
            The F5 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F6">
            <summary>
            The F6 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F7">
            <summary>
            The F7 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F8">
            <summary>
            The F8 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F9">
            <summary>
            The F9 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F10">
            <summary>
            The F10 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F11">
            <summary>
            The F11 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.F12">
            <summary>
            The F12 function key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.NumLock">
            <summary>
            The Num Lock key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.ScrollLock">
            <summary>
            The Scroll Lock key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LShift">
            <summary>
            The Left Shift key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.RShift">
            <summary>
            The Right Shift key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LControl">
            <summary>
            The Left Control key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.RControl">
            <summary>
            The Right Control key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LAlt">
            <summary>
            The Left Alt key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.RAlt">
            <summary>
            The Right Alt key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BrowserBack">
            <summary>
            The Browser Back key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BrowserForward">
            <summary>
            The Browser Forward key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BrowserRefresh">
            <summary>
            The Browser Refresh key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BrowserStop">
            <summary>
            The Browser Stop key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BrowserSearch">
            <summary>
            The Browser Search key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BrowserFavorites">
            <summary>
            The Browser Favorites key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BrowserHome">
            <summary>
            The Browser Home key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.VolumeMute">
            <summary>
            The Volume Mute key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.VolumeDown">
            <summary>
            The Volume Down key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.VolumeUp">
            <summary>
            The Volume Up key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MediaNextTrack">
            <summary>
            The Next Track media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MediaPreviousTrack">
            <summary>
            The Previous Track media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MediaStop">
            <summary>
            The Stop media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MediaPlayPause">
            <summary>
            The Play/Pause media key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LaunchMail">
            <summary>
            The Email launch key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LaunchApplication1">
            <summary>
            The First Application launch key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LaunchApplication2">
            <summary>
            The Second Application launch key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.SemiColon">
            <summary>
            The SemiColon key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Equals">
            <summary>
            The Equals key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Comma">
            <summary>
            The Comma key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Hyphen">
            <summary>
            The Hyphen key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Period">
            <summary>
            The Period key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Slash">
            <summary>
            The Forward Slash key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Tilde">
            <summary>
            The Tilde key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.OpenBracket">
            <summary>
            The Open Bracket key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BackSlash">
            <summary>
            The BackSlash key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CloseBracket">
            <summary>
            The Close Bracket key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Quotes">
            <summary>
            The Double Quotes key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CloseParentheses">
            <summary>
            The Close Parentheses key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Exclamation">
            <summary>
            The Exclamation key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.At">
            <summary>
            The At key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Pound">
            <summary>
            The Pound key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Dollar">
            <summary>
            The Dollar key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Percent">
            <summary>
            The Percent key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Caret">
            <summary>
            The Caret key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Ampersand">
            <summary>
            The Ampersand key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Asterisk">
            <summary>
            The Asterisk key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.OpenParentheses">
            <summary>
            The Open Parentheses key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Colon">
            <summary>
            The Colon key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Plus">
            <summary>
            The Plus key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.LessThan">
            <summary>
            The Less Than key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Underscore">
            <summary>
            The Underscore key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.GreaterThan">
            <summary>
            The Greater Than key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Question">
            <summary>
            The Question key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.BackTick">
            <summary>
            The Back Tick key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.OpenBrace">
            <summary>
            The Open Brace key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Pipe">
            <summary>
            The Pipe key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CloseBrace">
            <summary>
            The Close Brace key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Apostrophe">
            <summary>
            The Apostrophe key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Control">
            <summary>
            The Control modifier key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Alt">
            <summary>
            The Alt modifier key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.Shift">
            <summary>
            The Shift modifier key.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.KeyDown">
            <summary>
            The argument to indicate the key was pressed down.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.KeyPress">
            <summary>
            The argument to indicate the key was pressed.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.KeyUp">
            <summary>
            The argument to indicate the key was released.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.KeyOff">
            <summary>
            The argument to indicate the key was turned off, e.g., CapsLock Off.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.KeyOn">
            <summary>
            The argument to indicate the key was turned on, e.g., CapsLock On.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.PressHotkey">
            <summary>
            Message shown in a HotkeyBox when the cursor first moves to it.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseLeft">
            <summary>
            The Left mouse button.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseMiddle">
            <summary>
            The Middle mouse button.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseRight">
            <summary>
            The Right mouse button.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseXButton1">
            <summary>
            The fourth mouse button.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseXButton2">
            <summary>
            The fifth mouse button.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseClick">
            <summary>
            The argument to indicate the mouse button was clicked.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseDoubleClick">
            <summary>
            The argument to indicate the mouse button was double-clicked.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseDown">
            <summary>
            The argument to indicate the mouse button was pressed down.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseUp">
            <summary>
            The argument to indicate the mouse button was released.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseMove">
            <summary>
            The text to indicate the mouse was moved.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseWheel">
            <summary>
            The text to indicate the mouse wheel was scrolled.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseWheelDown">
            <summary>
            The argument to indicate the mouse wheel was scrolled down.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseWheelUp">
            <summary>
            The argument to indicate the mouse wheel was scrolled up.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseMoveRelative">
            <summary>
            Move the mouse is relative to the current mouse position.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseMoveWindow">
            <summary>
            Move the mouse to a position in the current window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.MouseMoveScreen">
            <summary>
            Move the mouse to a position on the screen.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandSeparator">
            <summary>
            String that separates commands.
            Is " " by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandBegin">
            <summary>
            String that indicates the beginning of an input command.
            Is "{" by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandEnd">
            <summary>
            String that indicates the end of an input command.
            Is "}" by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandArgumentBegin">
            <summary>
            String that indicates the beginning of an input argument list.
            Is ":" by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandArgumentSeparator">
            <summary>
            String that separates arguments in an input command.
            Is "," by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandArgumentTextBegin">
            <summary>
            String that indicates the beginning of an argument text.
            Is "[[" by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandArgumentTextEnd">
            <summary>
            String that indicates the end of an argument text.
            Is "]]" by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandPrefixSeparator">
            <summary>
            String that separates the prefixes in an input command
            from each other and the command.
            This is also used to separate modifiers of a key press or mouse click.
            Is "+" by default, e.g., "Alt+Shift+F1".
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandSuffixSeparator">
            <summary>
            String that separates the suffixes in an input command.
            This is also used to separate modifiers of a key or mouse event.
            Is " " by default, e.g., "Left Up".
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandTextBegin">
            <summary>
            String that indicates the beginning of a text command.
            Is "{{" by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandTextEnd">
            <summary>
            String that indicates the end of a text command.
            Is "}}" by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandNewline">
            <summary>
            String used to represent a newline in a macro.
            Is "\r\n" by default.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandMessage">
            <summary>
            String used to indicate this is a message command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandComment">
            <summary>
            String used to indicate this command is a comment.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandBeep">
            <summary>
            The command that beeps the PC.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandPause">
            <summary>
            The command that pauses execution.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandRun">
            <summary>
            The command that runs a specified macro.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandSound">
            <summary>
            The command that plays a specified sound file.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.CommandUnknown">
            <summary>
            String used to indicate this command is unknown.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowActivate">
            <summary>
            The Window Activate command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowBringToFront">
            <summary>
            The Window Bring-To-Front command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowClose">
            <summary>
            The Window Close command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowMaximize">
            <summary>
            The Window Maximize command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowMinimize">
            <summary>
            The Window Minimize command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowMove">
            <summary>
            The Window Move command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowResize">
            <summary>
            The Window Resize command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowRestore">
            <summary>
            The Window Restore command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowSendToBack">
            <summary>
            The Window Send-To-Back command.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextEntries.WindowTitle">
            <summary>
            The Window Title command.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputTextTypes">
            <summary>
            Different types of text supported.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextTypes.Plain">
            <summary>
            Friendly text shown to users.
            This text can vary based on language and preferences.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextTypes.Command">
            <summary>
            Text used for the macro command language.
            This text can vary based on language and preferences.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputTextTypes.Data">
            <summary>
            Text used to store and load input data.
            This text should never change and hence can be persisted.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputThread">
            <summary>
            Manages threads.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputThread.AttachThreadInput">
            <summary>
            Attaches the current thread's input to the active window's thread
            if it's not already attached.
            Automatically detaches from the current thread if necessary.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputThread.DetachThreadInput">
            <summary>
            Detaches the current thread's input from whatever other thread
            it is currently attached to.  OK to call if the current thread's input
            is not attached to another thread.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtInputThread.s_PrevForegroundThreadID">
            <summary>
            Save the previous foreground thread so that we don't have to keep
            attaching and unattaching.  We only attach when the foreground thread
            changes.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputThread.ActiveThreadID">
            <summary>
            Gets the ID of the thread that's currently active, i.e.,
            that currently accepts keyboard and mouse input.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputThread.CurrentThreadID">
            <summary>
            Gets the ID of this application's current thread,
            without the delay associated with GetCurrentProcess.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputTimer">
            <summary>
            WinForms-safe timer provided for convenience.
            Use this timer if your application displays the state of keys, 
            for example, CAPS and NUM in the status bar of a word processor.
            This timer will pulse on a regular basis so you can update the
            key state without having to monitor and process all key events.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputTimer.Enabled">
            <summary>
            Gets or sets whether this timer is enabled.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtInputTimer.IntervalMS">
            <summary>
            Gets or sets how often the timer ticks, in milliseconds.
            Default is 250 milliseconds (1/4 of a second).
            </summary>
        </member>
        <member name="E:MiniTools.UI.Input.MtInputTimer.Tick">
            <summary>
            Raised when the timer interval has expired.
            Be sure that Enabled = true.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputTimerHandler">
            <summary>
            Method called when the timer interval has expired.
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtInputUtils">
            <summary>
            Miscellaneous utility functions.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputUtils.StartsWith(System.String,System.String)">
            <summary>
            Returns whether the string 's1' starts with the string 's2',
            ignoring case.
            Returns null if either string is null or blank.
            </summary>
            <param name="s1">String in which to see if it starts with string 's2'. May be null or blank.</param>
            <param name="s2">String to see if it starts string 's1'. May be null or blank.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputUtils.StringsAreEqual(System.String,System.String)">
            <summary>
            Returns whether the two strings are equal, 
            starting at the specified index in the second string,
            ignoring case. This considers null and "" strings equal.
            </summary>
            <param name="s1">First string to compare. May be null or blank.</param>
            <param name="s2">Second string to compare. May be null or blank.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputUtils.StringsAreEqual(System.String,System.String,System.Int32)">
            <summary>
            Returns whether the two strings are equal, 
            starting at the specified index in the second string,
            ignoring case. This considers null and "" strings equal.
            </summary>
            <param name="s1">First string to compare. May be null or blank.</param>
            <param name="s2">Second string to compare. May be null or blank.</param>
            <param name="startIndex2">Index into second string where comparison should begin. Considered a null string if the index is invalid.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputUtils.TextToDouble(System.String)">
            <summary>
            Converts the specified text to a double floating point number.
            Returns zero if no number can be found in the specified text.
            Will not throw an exception.
            </summary>
            <param name="text">Any text; OK if null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtInputUtils.TextToInt(System.String)">
            <summary>
            Converts the specified text to an integer.
            Returns zero if no integer can be found in the specified text.
            Will not throw an exception.
            </summary>
            <param name="text">Any text; OK if null.</param>
        </member>
        <member name="T:MiniTools.UI.Input.MtWindow">
            <summary>
            (Pro) Wraps all open Win32 windows.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. 
            If the window is minimized or maximized, 
            the system restores it to its original size and position. 
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position. 
            This value is similar to SW_SHOWNORMAL, except the window is not activated.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position. 
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_MINIMIZE">
            <summary>
            Minimizes the specified window 
            and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. 
            This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position. 
            This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindow.SW_RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, 
            the system restores it to its original size and position. 
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructs a window object for the specified form.
            </summary>
            <param name="form">Form that you want to activate. Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.#ctor(System.IntPtr)">
            <summary>
            Constructs a window object for the window defined by the specified handle.
            </summary>
            <param name="hwnd">Handle to valid open window</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.Activate">
            <summary>
            Makes this window the active window.
            Returns the handle of the previously active window, 
            or null if it failed to activate the specified window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.ActivateWindow(System.Windows.Forms.Form)">
            <summary>
            Makes the specified window form the active window.
            Returns the handle of the previously active window, 
            or null if it failed to activate the specified window.
            </summary>
            <param name="form">Form that you want to activate. Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.ActivateWindow(System.IntPtr)">
            <summary>
            Makes the specified window the active window.
            Returns the handle of the previously active window, 
            or null if it failed to activate the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.ChildWindowsCallBack(System.IntPtr,System.Int32)">
            <summary>
            The enum Windows callback.
            </summary>
            <param name="hWnd">Window Handle</param>
            <param name="lParam">Application defined value</param>
            <returns>1 to continue enumeration, 0 to stop</returns>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetChildWindows(System.IntPtr)">
            <summary>
            Populates the child window collection.
            </summary>
            <param name="hWndParent">Window Handle to get children for</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowClassName(System.IntPtr)">
            <summary>
            Gets the specified window's class name.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.Close">
            <summary>
            Closes this window.  
            Note that this if your process does not own this window,
            this method is just a suggestion, and the window can ignore it.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.WindowClose(System.IntPtr)">
            <summary>
            Closes the specified window.  
            Note that this if your process does not own this window,
            this method is just a suggestion, and the window can ignore it.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowBounds(System.IntPtr)">
            <summary>
            Gets the location and size of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowBounds(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the location and size of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winHeight">Height of the window in pixels.</param>
            <param name="winLeft">Window left edge in pixels from the left edge of the screen.</param>
            <param name="winTop">Window top edge in pixels from the top edge of the screen.</param>
            <param name="winWidth">Width of the window in pixels.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowBounds(System.IntPtr,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Sets the location and size of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
            <param name="winLoc">Location of the window on the screen.</param>
            <param name="winSize">Size of the window.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowLocation(System.IntPtr)">
            <summary>
            Gets the location of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowLocation(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Sets the location of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winLeft">Window left edge in pixels from the left edge of the screen.</param>
            <param name="winTop">Window top edge in pixels from the top edge of the screen.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowLocation(System.IntPtr,System.Drawing.Point)">
            <summary>
            Sets the location of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winLoc">Window's new location.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowHeight(System.IntPtr)">
            <summary>
            Gets the height of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowHeight(System.IntPtr,System.Int32)">
            <summary>
            Sets the height of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winHeight">Window height in pixels.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowLeft(System.IntPtr)">
            <summary>
            Gets the left edge of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowLeft(System.IntPtr,System.Int32)">
            <summary>
            Sets the left edge of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winLeft">Window left edge in pixels.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowTop(System.IntPtr)">
            <summary>
            Gets the top edge of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowTop(System.IntPtr,System.Int32)">
            <summary>
            Sets the top edge of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winTop">Window top edge in pixels.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowWidth(System.IntPtr)">
            <summary>
            Gets the width of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowWidth(System.IntPtr,System.Int32)">
            <summary>
            Sets the width of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winWidth">Window width in pixels.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowSize(System.IntPtr)">
            <summary>
            Gets the size of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowSize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Sets the size of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winWidth">Window width in pixels.</param>
            <param name="winHeight">Window height in pixels.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowSize(System.IntPtr,System.Drawing.Size)">
            <summary>
            Sets the size of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle.</param>
            <param name="winSize">Window size in pixels.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SendToBack">
            <summary>
            Sends this window behind all other windows.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.WindowToBack(System.IntPtr)">
            <summary>
            Sends the specified window behind all other windows.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.WindowToBack(System.Windows.Forms.Form)">
            <summary>
            Sends the specified window behind all other windows.
            </summary>
            <param name="form">Form that you want to activate. Cannot be null.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.BringToFront">
            <summary>
            Brings this window to the front.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.WindowToFront(System.IntPtr)">
            <summary>
            Brings the specified window to the front.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindows(System.String)">
            <summary>
            Gets the open windows whose titles contain the specified name,
            ignoring case.
            Will return null if no windows match your specifications.
            </summary>
            <param name="title">Get windows with this title. Set to null to get all windows.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindows(System.String,System.Boolean,System.Boolean,MiniTools.UI.Input.MtWindowStyles)">
            <summary>
            Gets the windows with the specified characteristics.
            Will return null if no windows match your specifications.
            </summary>
            <param name="title">Get windows with this title. Set to null to get all windows.</param>
            <param name="matchAny">Whether to match any part of the window title (true) or must match the entire title (false).</param>
            <param name="ignoreCase">Whether to ignore window title case.</param>
            <param name="styles">What style of windows to return.</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.WindowsCallBack(System.Int32,System.Int32)">
            <summary>
            Callback for populating the window collection.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.ClearEnumInfo(System.Int32)">
            <summary>
            Clears the specified enum information.
            </summary>
            <param name="index">Must be between zero and c_NumEnumInfos</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetEnumInfo(System.Int32)">
            <summary>
            Gets the enum window information with the specified index.
            </summary>
            <param name="index">Must be between zero and c_NumEnumInfos</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetNewInfoIndex">
            <summary>
            Gets a new index to use to store enum window information.
            Returns -1 if we are out of available slots.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowProcessID(System.IntPtr)">
            <summary>
            Gets the ID of the process that owns the specified window.
            </summary>
            <param name="hWnd">Handle to valid open window</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.Show">
            <summary>
            Shows this window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.ShowWindow(System.IntPtr)">
            <summary>
            Shows the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.Maximize">
            <summary>
            Maximizes and activates this window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.MaximizeWindow(System.IntPtr)">
            <summary>
            Maximizes and activates the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.Minimize">
            <summary>
            Minimizes (but does not activate) this window.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.MinimizeWindow(System.IntPtr)">
            <summary>
            Minimizes (but does not activate) the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.Restore">
            <summary>
            Restores this window to its normal position and activates it.
            </summary>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.RestoreWindow(System.IntPtr)">
            <summary>
            Restores the specified window to its normal position and activates it.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowState(System.IntPtr)">
            <summary>
            Gets the state of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowState(System.IntPtr,System.Windows.Forms.FormWindowState)">
            <summary>
            Sets the state of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
            <param name="winState">State in which to put the window</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.GetWindowText(System.IntPtr)">
            <summary>
            Gets the name that appears in the title bar of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.SetWindowText(System.IntPtr,System.String)">
            <summary>
            Sets the name that appears in the title bar of the specified window.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
            <param name="winText">Title bar text</param>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.IsWindowValid(System.IntPtr)">
            <summary>
            Gets whether the specified handle is a valid window handle.
            </summary>
            <param name="hWnd">Can be anything.</param>
            <returns></returns>
        </member>
        <member name="M:MiniTools.UI.Input.MtWindow.IsWindowVisible(System.IntPtr)">
            <summary>
            Gets whether the specified window is currently visible.
            </summary>
            <param name="hWnd">Must be valid window handle</param>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.ActiveForm">
            <summary>
            Gets or sets the currently active WinForms form.
            Will return null if the active form belongs to another process. 
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.ActiveWindowHandle">
            <summary>
            Gets or sets the handle of the currently active window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.LastActiveWindow">
            <summary>
            Gets the window from another process that was last active
            before the current window became active.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.LastActiveWindowOther">
            <summary>
            Gets the window from another process that was last active
            before the current window became active.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.ActiveWindow">
            <summary>
            Gets or sets the currently active window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.ChildWindows">
            <summary>
            Gets an array of child windows for this window.
            May be null if this window contains no child windows.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.ClassName">
            <summary>
            Gets this window's class name.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Bounds">
            <summary>
            Gets or sets the location and size of this window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Location">
            <summary>
            Gets or sets the location of this window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Height">
            <summary>
            Gets or sets the height of this window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Left">
            <summary>
            Gets or sets the left edge of this window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Top">
            <summary>
            Gets or sets the top edge of this window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Width">
            <summary>
            Gets or sets the width of this window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Size">
            <summary>
            Gets or sets the size of this window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.AllWindows">
            <summary>
            Gets an array of all known windows, visible and not, tool and desktop.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.OpenWindows">
            <summary>
            Gets an array of open desktop (non-tool) windows.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.ToolWindows">
            <summary>
            Gets an array of open tool windows.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.VisibleWindows">
            <summary>
            Gets an array of all visible desktop and tool windows.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Handle">
            <summary>
            Gets this window's handle.  Will not be IntPtr.Zero.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.ActiveWindowProcessID">
            <summary>
            Gets the ID of the process with the active window.
            Note that this may not be the process currently executing
            (use CurrentProcessID for that).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.CurrentProcessID">
            <summary>
            Gets the ID of the current process.
            This is the process that is currently executing,
            not necessarily the process that owns the active window
            (use ActiveWindowProcessID for that).
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.ProcessID">
            <summary>
            Gets the ID of the process that owns this window.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.WindowState">
            <summary>
            Gets or sets the window's current state.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Text">
            <summary>
            Gets or sets the name that appears in the window title bar.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.IsValid">
            <summary>
            Gets whether this window is still valid.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.Visible">
            <summary>
            Gets whether this window is currently visible.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.EnumWindowInfo.IgnoreCase">
            <summary>
            Gets whether the title match should ignore case.
            Default is false.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.EnumWindowInfo.MatchAny">
            <summary>
            Gets or sets whether the specified Title can match any part
            of the window title (true) or must match the entire Title (false).
            Default is false.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.EnumWindowInfo.Styles">
            <summary>
            Gets or sets the styles of windows to find.
            Default is normal visible.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.EnumWindowInfo.Title">
            <summary>
            Gets or sets the title of the window to find.
            If null, will get all windows.
            </summary>
        </member>
        <member name="P:MiniTools.UI.Input.MtWindow.RECT.Rectangle">
            <summary>
            Handy method for converting to a System.Drawing.Rectangle
            </summary>
        </member>
        <member name="T:MiniTools.UI.Input.MtWindowStyles">
            <summary>
            Different types of windows.  Used when getting a list of open windows.
            You can OR the styles together to specify which windows you want.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowStyles.None">
            <summary>
            No windows.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowStyles.Visible">
            <summary>
            Visible windows.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowStyles.NotVisible">
            <summary>
            Windows which are currently not visible.
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowStyles.Normal">
            <summary>
            Normal desktop windows (windows which appear in the Windows Start Bar).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowStyles.Tool">
            <summary>
            Tool windows (windows which do not appear in the Windows Start Bar).
            </summary>
        </member>
        <member name="F:MiniTools.UI.Input.MtWindowStyles.All">
            <summary>
            All possible windows.
            </summary>
        </member>
    </members>
</doc>
